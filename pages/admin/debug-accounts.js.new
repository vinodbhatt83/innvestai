// pages/admin/debug-accounts.js
import React, { useState } from 'react';
import Layout from '../../components/Layout';

export default function DebugAccounts() {
    const [accountId, setAccountId] = useState('');
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [result, setResult] = useState(null);
    
    const fetchUsers = async (e) => {
        e.preventDefault();
        
        if (!accountId) {
            setError('Please enter an account ID');
            return;
        }
        
        try {
            setLoading(true);
            setError(null);
            setResult(null);
            
            console.log('Fetching users for account:', accountId);
            const response = await fetch(`/api/debug/users?accountId=${accountId}`);
            const responseText = await response.text();
            
            console.log('Raw response:', {
                status: response.status,
                text: responseText
            });
            
            try {
                // Try to parse as JSON
                const data = JSON.parse(responseText);
                setResult({
                    status: response.status,
                    data
                });
                
                if (!response.ok) {
                    setError(`API error: ${data.error || response.statusText}`);
                } else {
                    setUsers(data.users || []);
                }
            } catch (parseError) {
                setError(`Failed to parse response: ${parseError.message}`);
                setResult({
                    status: response.status,
                    text: responseText
                });
            }
        } catch (err) {
            setError(`Request error: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <Layout title="Debug Users">
            <div className="p-8">
                <div className="max-w-4xl mx-auto bg-white shadow-sm rounded-lg p-6">
                    <h1 className="text-2xl font-bold mb-6">Debug Users API</h1>
                    
                    <form onSubmit={fetchUsers} className="mb-8">
                        <div className="mb-4">
                            <label htmlFor="accountId" className="block text-sm font-medium text-gray-700 mb-1">
                                Account ID:
                            </label>
                            <div className="flex">
                                <input
                                    type="text"
                                    id="accountId"
                                    value={accountId}
                                    onChange={(e) => setAccountId(e.target.value)}
                                    className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md mr-4"
                                    placeholder="Enter account ID"
                                />
                                <button
                                    type="submit"
                                    disabled={loading}
                                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-secondary hover:bg-secondary-light focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary"
                                >
                                    {loading ? 'Loading...' : 'Fetch Users'}
                                </button>
                            </div>
                        </div>
                    </form>
                    
                    {error && (
                        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
                            <h2 className="text-red-800 text-lg font-medium mb-2">Error:</h2>
                            <pre className="text-red-700 text-sm whitespace-pre-wrap">{error}</pre>
                        </div>
                    )}
                    
                    {result && (
                        <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-md">
                            <h2 className="text-gray-800 text-lg font-medium mb-2">API Response:</h2>
                            <pre className="text-gray-700 text-sm whitespace-pre-wrap overflow-auto max-h-60">
                                {JSON.stringify(result, null, 2)}
                            </pre>
                        </div>
                    )}
                    
                    {users && users.length > 0 && (
                        <div>
                            <h2 className="text-xl font-medium mb-4">Users ({users.length}):</h2>
                            <div className="bg-white shadow overflow-hidden sm:rounded-md">
                                <ul className="divide-y divide-gray-200">
                                    {users.map(user => (
                                        <li key={user.user_id} className="px-4 py-4">
                                            <div>
                                                <div className="flex items-center justify-between">
                                                    <p className="text-sm font-medium text-secondary truncate">
                                                        {user.first_name} {user.last_name}
                                                    </p>
                                                    <div className="ml-2 flex-shrink-0 flex">
                                                        <p className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                                            user.is_active 
                                                                ? 'bg-green-100 text-green-800' 
                                                                : 'bg-red-100 text-red-800'
                                                        }`}>
                                                            {user.is_active ? 'Active' : 'Inactive'}
                                                        </p>
                                                    </div>
                                                </div>
                                                <p className="mt-1 text-sm text-gray-600">
                                                    {user.email}
                                                </p>
                                                <p className="mt-1 text-xs text-gray-500">
                                                    Role: {user.role_name || 'No role'} | 
                                                    {user.is_account_admin ? ' Admin' : ' Regular User'}
                                                </p>
                                            </div>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </Layout>
    );
}
