"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/deals";
exports.ids = ["pages/api/deals"];
exports.modules = {

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_deals_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\deals\\index.js */ \"(api-node)/./pages/api/deals/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_index_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_index_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/deals\",\n        pathname: \"/api/deals\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_deals_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZGVhbHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2RlYWxzJTVDaW5kZXguanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDMEQ7QUFDMUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHNEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxzREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxkZWFsc1xcXFxpbmRleC5qc1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCAnZGVmYXVsdCcpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgJ2NvbmZpZycpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGVhbHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZWFsc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/deals/index.js":
/*!**********************************!*\
  !*** ./pages/api/deals/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n// pages/api/deals/index.js\n\nasync function handler(req, res) {\n    switch(req.method){\n        case 'GET':\n            try {\n                // Get all deals with optional filtering\n                const { limit = 10, offset = 0, sortBy = 'created_at', order = 'DESC' } = req.query;\n                // First, check the structure of the deals table\n                const tableInfoQuery = `\n          SELECT column_name \n          FROM information_schema.columns \n          WHERE table_schema = 'public' \n          AND table_name = 'deals';\n        `;\n                const tableInfo = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tableInfoQuery);\n                const dealColumns = tableInfo.rows.map((row)=>row.column_name);\n                console.log('Deal table columns:', dealColumns);\n                // Get the deal ID column name (deal_id or id)\n                const dealIdColumn = dealColumns.find((col)=>col === 'deal_id' || col === 'id') || 'id';\n                // Check if property_id exists in deals\n                const hasPropertyId = dealColumns.includes('property_id');\n                // Get all deals\n                let dealsQuery;\n                if (hasPropertyId) {\n                    // Attempt a simple query first to see if it works\n                    dealsQuery = `\n            SELECT * FROM deals\n            ORDER BY ${dealColumns.includes('created_at') ? 'created_at' : dealIdColumn} ${order === 'ASC' ? 'ASC' : 'DESC'}\n            LIMIT $1 OFFSET $2\n          `;\n                } else {\n                    // If no property_id, just get deals without trying to join\n                    dealsQuery = `\n            SELECT * FROM deals\n            ORDER BY ${dealColumns.includes('created_at') ? 'created_at' : dealIdColumn} ${order === 'ASC' ? 'ASC' : 'DESC'}\n            LIMIT $1 OFFSET $2\n          `;\n                }\n                const countQuery = `SELECT COUNT(*) FROM deals`;\n                const [dealsResult, countResult] = await Promise.all([\n                    (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(dealsQuery, [\n                        limit,\n                        offset\n                    ]),\n                    (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(countQuery)\n                ]);\n                // If we have deals and property_id exists, try to get property details\n                const deals = [\n                    ...dealsResult.rows\n                ]; // This is just the part of the code that needs to be fixed in pages/api/deals/index.js\n                // Enhanced deal data processing\n                if (deals.length > 0) {\n                    // Add default values for any missing fields and enhance with property info\n                    for(let i = 0; i < deals.length; i++){\n                        // Calculate investment amount from purchase_price if available, otherwise use default\n                        if (!deals[i].investment_amount && deals[i].purchase_price) {\n                            deals[i].investment_amount = deals[i].purchase_price;\n                        } else if (!deals[i].investment_amount) {\n                            deals[i].investment_amount = 1000000; // Default to $1M if no amount available\n                        }\n                        // Set default return percentages based on property_type if not set\n                        if (!deals[i].expected_return) {\n                            switch(deals[i].property_type?.toLowerCase()){\n                                case 'luxury':\n                                    deals[i].expected_return = 8.5;\n                                    break;\n                                case 'full service':\n                                    deals[i].expected_return = 8.2;\n                                    break;\n                                case 'limited service':\n                                    deals[i].expected_return = 8.8;\n                                    break;\n                                default:\n                                    deals[i].expected_return = 8.5; // Default\n                            }\n                        }\n                        // Calculate price per key if possible\n                        if (deals[i].purchase_price && deals[i].number_of_rooms) {\n                            deals[i].price_per_key = Math.round(deals[i].purchase_price / deals[i].number_of_rooms);\n                        }\n                        // Set default hold period if not present\n                        if (!deals[i].hold_period) {\n                            deals[i].hold_period = 5; // Default 5 year hold\n                        }\n                        // Try to get property data from dim_property\n                        try {\n                            // Check if dim_property table exists\n                            const tableCheck = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(`\n                SELECT table_name FROM information_schema.tables \n                WHERE table_schema = 'public' AND table_name = 'dim_property'\n              `);\n                            if (tableCheck.rows.length > 0) {\n                                // If deal has property_id, try to get property details\n                                if (deals[i].property_id) {\n                                    const propertyData = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(`\n                    SELECT p.*, h.hotel_type_name \n                    FROM dim_property p\n                    LEFT JOIN dim_hotel_type h ON p.hotel_type_key = h.hotel_type_key\n                    WHERE p.property_key = $1 OR p.property_id = $1\n                  `, [\n                                        deals[i].property_id\n                                    ]);\n                                    if (propertyData.rows.length > 0) {\n                                        const property = propertyData.rows[0];\n                                        // Add property details to deal\n                                        deals[i] = {\n                                            ...deals[i],\n                                            property_name: property.property_name || deals[i].property_name,\n                                            property_address: property.property_address || deals[i].property_address,\n                                            city: property.city || deals[i].city,\n                                            state: property.state || deals[i].state,\n                                            property_type: property.hotel_type_name || deals[i].property_type,\n                                            number_of_rooms: property.room_count || deals[i].number_of_rooms,\n                                            star_rating: property.star_rating,\n                                            brand: property.brand,\n                                            chain_scale: property.chain_scale,\n                                            year_built: property.year_built,\n                                            year_renovated: property.year_renovated\n                                        };\n                                    }\n                                }\n                            }\n                        } catch (err) {\n                            console.log('Error getting property data:', err.message);\n                        }\n                        // Get acquisition data if available (fetch from fact_deal_assumptions and dim_acquisition)\n                        try {\n                            const acquisitionData = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(`\n                SELECT a.* \n                FROM fact_deal_assumptions f\n                JOIN dim_acquisition a ON f.acquisition_id = a.acquisition_id\n                WHERE f.deal_id = $1\n              `, [\n                                deals[i].deal_id\n                            ]);\n                            if (acquisitionData.rows.length > 0) {\n                                deals[i] = {\n                                    ...deals[i],\n                                    ...acquisitionData.rows[0]\n                                };\n                            }\n                        } catch (err) {\n                            console.log('No acquisition data found for deal:', deals[i].deal_id);\n                        }\n                    }\n                }\n                if (deals.length > 0 && hasPropertyId) {\n                    // Try to enhance deals with property info\n                    try {\n                        // First, check if dim_property table exists and get its structure\n                        const propertyInfoQuery = `\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_schema = 'public' \n      AND table_name = 'dim_property';\n    `;\n                        const propertyInfo = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(propertyInfoQuery);\n                        if (propertyInfo.rows.length > 0) {\n                            // Enhance each deal with property info\n                            for(let i = 0; i < deals.length; i++){\n                                const deal = deals[i];\n                                if (deal.property_id) {\n                                    // Use property_key instead of property_id\n                                    const propertyQuery = `\n            SELECT p.*, h.hotel_type_name, m.market_name\n            FROM dim_property p\n            LEFT JOIN dim_hotel_type h ON p.hotel_type_key = h.hotel_type_key\n            LEFT JOIN dim_market m ON p.market_key = m.market_key\n            WHERE p.property_key = $1\n          `;\n                                    try {\n                                        const propertyResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(propertyQuery, [\n                                            deal.property_id\n                                        ]);\n                                        const property = propertyResult.rows[0];\n                                        if (property) {\n                                            deals[i] = {\n                                                ...deal,\n                                                property_name: property.property_name,\n                                                hotel_type_name: property.hotel_type_name,\n                                                market_name: property.market_name,\n                                                // Use property's room_count if available \n                                                number_of_rooms: property.room_count || deal.number_of_rooms\n                                            };\n                                        }\n                                    } catch (propError) {\n                                        console.error('Error fetching property for deal:', propError);\n                                    // If property fetch fails, continue with original deal\n                                    }\n                                }\n                            }\n                        }\n                    } catch (enhanceError) {\n                        console.error('Error enhancing deals with property info:', enhanceError);\n                    // Continue with basic deal data\n                    }\n                }\n                res.status(200).json({\n                    deals,\n                    total: parseInt(countResult.rows[0].count),\n                    limit: parseInt(limit),\n                    offset: parseInt(offset)\n                });\n            } catch (error) {\n                console.error('Error executing query:', error);\n                res.status(500).json({\n                    error: 'Failed to retrieve deals',\n                    details: error.message\n                });\n            }\n            break;\n        // pages/api/deals/index.js (POST section updated)\n        case 'POST':\n            try {\n                // Extract form fields from the request\n                const requestBody = req.body;\n                console.log('Request body:', requestBody);\n                // Check the structure of the deals table\n                const tableInfoQuery = `\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_schema = 'public' \n      AND table_name = 'deals';\n    `;\n                let tableInfo;\n                try {\n                    tableInfo = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tableInfoQuery);\n                } catch (error) {\n                    console.log('Error getting table info, deals table might not exist');\n                    // Create a complete deals table with all required fields\n                    const createTableQuery = `\n        CREATE TABLE IF NOT EXISTS deals (\n          id SERIAL PRIMARY KEY,\n          property_id INTEGER,\n          deal_name VARCHAR(255) NOT NULL,\n          investment_amount DECIMAL(15, 2) NOT NULL DEFAULT 1000000,\n          expected_return DECIMAL(6, 2) NOT NULL DEFAULT 8.5,\n          start_date DATE NOT NULL DEFAULT CURRENT_DATE,\n          end_date DATE NOT NULL DEFAULT (CURRENT_DATE + INTERVAL '5 years'),\n          status VARCHAR(50) DEFAULT 'Draft',\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n      `;\n                    await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(createTableQuery);\n                    console.log('Created deals table with all required columns');\n                    // Get the columns again\n                    tableInfo = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tableInfoQuery);\n                }\n                const dealColumns = tableInfo.rows.map((row)=>row.column_name);\n                console.log('Deal table columns after check:', dealColumns);\n                // Map property_id if it was sent from the client as property_key\n                let propertyId = requestBody.property_id;\n                // If property_id wasn't sent but property_key was, use that instead\n                if (propertyId === undefined && requestBody.property_key !== undefined) {\n                    propertyId = requestBody.property_key;\n                }\n                // Include the required fields with default values if not provided\n                const dataToInsert = {\n                    deal_name: requestBody.deal_name,\n                    property_id: propertyId || null,\n                    investment_amount: requestBody.investment_amount || 1000000,\n                    expected_return: requestBody.expected_return || 8.5,\n                    start_date: requestBody.start_date || new Date().toISOString().split('T')[0],\n                    end_date: requestBody.end_date || new Date(new Date().setFullYear(new Date().getFullYear() + 5)).toISOString().split('T')[0],\n                    status: requestBody.status || 'Draft'\n                };\n                // Generate the column list and placeholders\n                const columns = [];\n                const values = [];\n                let placeholders = [];\n                // Add fields that exist in the database\n                Object.keys(dataToInsert).forEach((key)=>{\n                    if (dealColumns.includes(key) && dataToInsert[key] !== undefined) {\n                        columns.push(key);\n                        values.push(dataToInsert[key]);\n                        placeholders.push(`$${values.length}`);\n                    }\n                });\n                // Add created_at if in columns\n                if (dealColumns.includes('created_at') && !columns.includes('created_at')) {\n                    columns.push('created_at');\n                    values.push(new Date());\n                    placeholders.push(`$${values.length}`);\n                }\n                console.log('Columns to insert:', columns);\n                console.log('Values to insert:', values);\n                if (columns.length === 0) {\n                    return res.status(400).json({\n                        error: 'No valid deal data provided'\n                    });\n                }\n                const insertQuery = `\n      INSERT INTO deals (${columns.join(', ')})\n      VALUES (${placeholders.join(', ')})\n      RETURNING *\n    `;\n                console.log('Insert query:', insertQuery);\n                const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(insertQuery, values);\n                console.log('Insert result:', result.rows[0]);\n                res.status(201).json(result.rows[0]);\n            } catch (error) {\n                console.error('Error creating deal:', error);\n                res.status(500).json({\n                    error: 'Failed to create deal',\n                    details: error.message\n                });\n            }\n            break;\n        default:\n            res.setHeader('Allow', [\n                'GET',\n                'POST'\n            ]);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/deals/index.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();