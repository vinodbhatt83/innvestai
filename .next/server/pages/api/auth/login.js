"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/auth/login";
exports.ids = ["pages/api/auth/login"];
exports.modules = {

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountManager: () => (/* binding */ accountManager),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   clientAccountManager: () => (/* binding */ clientAccountManager),\n/* harmony export */   clientAuth: () => (/* binding */ clientAuth)\n/* harmony export */ });\n// lib/auth.js\n// Declare variables to hold modules\nlet bcrypt;\nlet uuidv4;\nlet queryFn;\nlet poolObj;\n// Only initialize on the server\nif (true) {\n    try {\n        // Server-side imports\n        bcrypt = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n        const { v4 } = __webpack_require__(/*! uuid */ \"uuid\");\n        uuidv4 = v4;\n        // Import database functions - using dynamic import to avoid webpack issues\n        const dbModule = __webpack_require__(/*! ./db.js */ \"(api-node)/./lib/db.js\");\n        queryFn = dbModule.query;\n        poolObj = dbModule.pool;\n    } catch (error) {\n        console.error('Error initializing auth module:', error);\n        // Provide fallbacks if imports fail\n        bcrypt = {\n            hash: async ()=>'hash-function-not-available',\n            compare: async ()=>false\n        };\n        uuidv4 = ()=>'uuid-function-not-available';\n        queryFn = async ()=>{\n            throw new Error('Database query function not available');\n        };\n        poolObj = {\n            query: async ()=>{\n                throw new Error('Database pool not available');\n            }\n        };\n    }\n} else {}\n// Simple session-based authentication\nconst auth = {\n    // Create a hashed password\n    async hashPassword (password) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.hash(password, 10);\n    },\n    // Compare password with hash\n    async comparePassword (password, hash) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.compare(password, hash);\n    },\n    // Find user by email - server only\n    async findUserByEmail (email) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name \n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.email = $1`, [\n                email\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by email:', error);\n            throw error;\n        }\n    },\n    // Find user by ID - server only\n    async findUserById (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.user_id = $1`, [\n                userId\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by ID:', error);\n            throw error;\n        }\n    },\n    // Create a new session - server only\n    async createSession (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const sessionToken = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiration\n        try {\n            await queryFn('INSERT INTO sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                sessionToken,\n                expiresAt\n            ]);\n            return sessionToken;\n        } catch (error) {\n            console.error('Error creating session:', error);\n            throw error;\n        }\n    },\n    // Verify a session token - server only\n    async verifySession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        console.log('verifySession called with token', {\n            tokenLength: sessionToken ? sessionToken.length : 0,\n            tokenPrefix: sessionToken ? sessionToken.substring(0, 8) + '...' : 'none'\n        });\n        try {\n            const result = await queryFn(`SELECT u.*, s.session_id, s.expires_at, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM sessions s\n         JOIN users u ON s.user_id = u.user_id\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE s.session_token = $1 AND s.expires_at > NOW()`, [\n                sessionToken\n            ]);\n            console.log('verifySession query result', {\n                found: result.rowCount > 0,\n                userData: result.rowCount > 0 ? {\n                    user_id: result.rows[0].user_id,\n                    email: result.rows[0].email,\n                    account_id: result.rows[0].account_id,\n                    is_account_admin: result.rows[0].is_account_admin,\n                    account_name: result.rows[0].account_name,\n                    role_name: result.rows[0].role_name\n                } : null\n            });\n            // Add standard property names for consistency\n            if (result.rowCount > 0) {\n                const user = result.rows[0];\n                // Map database field names to the camelCase format expected by frontend\n                user.id = user.user_id;\n                user.firstName = user.first_name;\n                user.lastName = user.last_name;\n                user.accountId = user.account_id;\n                user.isAdmin = user.is_account_admin;\n                user.accountName = user.account_name;\n            }\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying session:', error);\n            throw error;\n        }\n    },\n    // Invalidate a session - server only\n    async invalidateSession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            await queryFn('DELETE FROM sessions WHERE session_token = $1', [\n                sessionToken\n            ]);\n            return true;\n        } catch (error) {\n            console.error('Error invalidating session:', error);\n            throw error;\n        }\n    },\n    // Create a password reset token - server only\n    async createPasswordResetToken (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const token = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setHours(expiresAt.getHours() + 24); // 24 hours expiration\n        try {\n            await queryFn('INSERT INTO password_reset_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                token,\n                expiresAt\n            ]);\n            return token;\n        } catch (error) {\n            console.error('Error creating password reset token:', error);\n            throw error;\n        }\n    },\n    // Verify a password reset token - server only\n    async verifyResetToken (token) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn('SELECT * FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW()', [\n                token\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying reset token:', error);\n            throw error;\n        }\n    },\n    // Reset password - server only\n    async resetPassword (token, newPassword) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const tokenRecord = await this.verifyResetToken(token);\n            if (!tokenRecord) {\n                return {\n                    success: false,\n                    error: 'Invalid or expired token'\n                };\n            }\n            const passwordHash = await this.hashPassword(newPassword);\n            // Update password\n            await queryFn('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE user_id = $2', [\n                passwordHash,\n                tokenRecord.user_id\n            ]);\n            // Delete the token\n            await queryFn('DELETE FROM password_reset_tokens WHERE token_id = $1', [\n                tokenRecord.token_id\n            ]);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error resetting password:', error);\n            throw error;\n        }\n    }\n};\n// Account management - all methods are server-only\nconst accountManager = {\n    // Create a new account with admin user\n    async createAccount (accountData, userData) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            // Start a transaction\n            await queryFn('BEGIN');\n            // Create account\n            const accountResult = await queryFn('INSERT INTO accounts (account_name, account_domain, plan_id, billing_email) VALUES ($1, $2, $3, $4) RETURNING *', [\n                accountData.accountName,\n                accountData.accountDomain || null,\n                accountData.planId || 1,\n                accountData.billingEmail\n            ]);\n            const account = accountResult.rows[0];\n            // Hash password\n            const passwordHash = await auth.hashPassword(userData.password);\n            // Create admin user (role_id 1 = Admin)\n            const userResult = await queryFn(`INSERT INTO users (account_id, email, password_hash, first_name, last_name, role_id, is_account_admin) \n         VALUES ($1, $2, $3, $4, $5, 1, TRUE) RETURNING *`, [\n                account.account_id,\n                userData.email,\n                passwordHash,\n                userData.firstName,\n                userData.lastName\n            ]);\n            const admin = userResult.rows[0];\n            // Commit transaction\n            await queryFn('COMMIT');\n            return {\n                account,\n                admin\n            };\n        } catch (error) {\n            // Rollback transaction on error\n            await queryFn('ROLLBACK');\n            console.error('Error creating account:', error);\n            throw error;\n        }\n    }\n};\n// Create mock implementations for client-side use\nconst createMockAuth = ()=>{\n    const mockAuth = {\n        // Mock implementations that are safe to use on the client\n        async hashPassword (password) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.hashPassword(password);\n            }\n            // On client, just return a placeholder (real hashing happens server-side)\n            console.warn('hashPassword called on client, real hashing will happen server-side');\n            return `mock-hash-${password.length}`;\n        },\n        async comparePassword (password, hash) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.comparePassword(password, hash);\n            }\n            // On client, just return a placeholder (real comparison happens server-side)\n            console.warn('comparePassword called on client, real comparison will happen server-side');\n            return false;\n        },\n        // These methods should be called via API endpoints on the client\n        async findUserByEmail () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async findUserById () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifySession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async invalidateSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createPasswordResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifyResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async resetPassword () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAuth;\n};\n// Create a mock account manager for client-side use\nconst createMockAccountManager = ()=>{\n    const mockAccountManager = {\n        // All methods should be called via API endpoints on the client\n        async createAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async getAccountUsers () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAccountManager;\n};\n// Export the appropriate implementations based on environment\nconst clientAuth =  false ? 0 : auth;\nconst clientAccountManager =  false ? 0 : accountManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Clogin.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Clogin.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_auth_login_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\auth\\login.js */ \"(api-node)/./pages/api/auth/login.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_login_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_login_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/auth/login\",\n        pathname: \"/api/auth/login\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_auth_login_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYXV0aCUyRmxvZ2luJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhdXRoJTVDbG9naW4uanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDeUQ7QUFDekQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHFEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxxREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhdXRoXFxcXGxvZ2luLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hdXRoL2xvZ2luXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9sb2dpblwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Clogin.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/auth/login.js":
/*!*********************************!*\
  !*** ./pages/api/auth/login.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cookie */ \"cookie\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cookie__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_auth_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/auth.js */ \"(api-node)/./lib/auth.js\");\n/* harmony import */ var _lib_db_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/db.js */ \"(api-node)/./lib/db.js\");\n// pages/api/auth/login.js\n\n\n\nasync function handler(req, res) {\n    // Only accept POST requests\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        const { email, password } = req.body;\n        // Validate inputs\n        if (!email || !password) {\n            return res.status(400).json({\n                error: 'Email and password are required'\n            });\n        }\n        try {\n            // Find user by email\n            const user = await _lib_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth.findUserByEmail(email);\n            // Check if user exists\n            if (!user) {\n                return res.status(401).json({\n                    error: 'Invalid credentials'\n                });\n            }\n            // Check if user is active\n            if (!user.is_active) {\n                return res.status(401).json({\n                    error: 'Account is inactive. Please contact your administrator.'\n                });\n            }\n            // Check if account is active\n            if (!user.account_is_active) {\n                return res.status(401).json({\n                    error: 'Your organization account is inactive. Please contact support.'\n                });\n            }\n            // Verify password\n            const passwordValid = await _lib_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth.comparePassword(password, user.password_hash);\n            if (!passwordValid) {\n                return res.status(401).json({\n                    error: 'Invalid credentials'\n                });\n            }\n            // Update last login time\n            await (0,_lib_db_js__WEBPACK_IMPORTED_MODULE_2__.query)('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE user_id = $1', [\n                user.user_id\n            ]);\n            // Create a new session\n            const sessionToken = await _lib_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth.createSession(user.user_id);\n            // Set session cookie\n            res.setHeader('Set-Cookie', cookie__WEBPACK_IMPORTED_MODULE_0___default().serialize('session_token', sessionToken, {\n                httpOnly: true,\n                secure: \"development\" === 'production',\n                maxAge: 60 * 60 * 24 * 7,\n                sameSite: 'strict',\n                path: '/'\n            }));\n            // Return user info without sensitive data\n            return res.status(200).json({\n                user: {\n                    id: user.user_id,\n                    email: user.email,\n                    firstName: user.first_name,\n                    lastName: user.last_name,\n                    accountId: user.account_id,\n                    accountName: user.account_name,\n                    role: user.role_name,\n                    isAdmin: user.is_account_admin\n                },\n                sessionToken\n            });\n        } catch (dbError) {\n            console.error('Database operation error during login:', dbError);\n            return res.status(500).json({\n                error: 'A database error occurred. Please check your database configuration.'\n            });\n        }\n    } catch (error) {\n        console.error('Login error:', error);\n        return res.status(500).json({\n            error: 'An error occurred during login'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0osSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQWlDO0lBQ3hFO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFx2aW5vZFxccHJvamVjdHNcXGlubnZlc3RcXFBPQ1xcaW5udmVzdGFpXFxwYWdlc1xcYXBpXFxhdXRoXFxsb2dpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWdlcy9hcGkvYXV0aC9sb2dpbi5qc1xyXG5pbXBvcnQgY29va2llIGZyb20gJ2Nvb2tpZSc7XHJcbmltcG9ydCB7IGF1dGggfSBmcm9tICcuLi8uLi8uLi9saWIvYXV0aC5qcyc7XHJcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSAnLi4vLi4vLi4vbGliL2RiLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcclxuICAvLyBPbmx5IGFjY2VwdCBQT1NUIHJlcXVlc3RzXHJcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSByZXEuYm9keTtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBpbnB1dHNcclxuICAgIGlmICghZW1haWwgfHwgIXBhc3N3b3JkKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnRW1haWwgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCcgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gRmluZCB1c2VyIGJ5IGVtYWlsXHJcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBhdXRoLmZpbmRVc2VyQnlFbWFpbChlbWFpbCk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGV4aXN0c1xyXG4gICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGlzIGFjdGl2ZVxyXG4gICAgICBpZiAoIXVzZXIuaXNfYWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdBY2NvdW50IGlzIGluYWN0aXZlLiBQbGVhc2UgY29udGFjdCB5b3VyIGFkbWluaXN0cmF0b3IuJyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgYWNjb3VudCBpcyBhY3RpdmVcclxuICAgICAgaWYgKCF1c2VyLmFjY291bnRfaXNfYWN0aXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdZb3VyIG9yZ2FuaXphdGlvbiBhY2NvdW50IGlzIGluYWN0aXZlLiBQbGVhc2UgY29udGFjdCBzdXBwb3J0LicgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFZlcmlmeSBwYXNzd29yZFxyXG4gICAgICBjb25zdCBwYXNzd29yZFZhbGlkID0gYXdhaXQgYXV0aC5jb21wYXJlUGFzc3dvcmQocGFzc3dvcmQsIHVzZXIucGFzc3dvcmRfaGFzaCk7XHJcblxyXG4gICAgICBpZiAoIXBhc3N3b3JkVmFsaWQpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgbGFzdCBsb2dpbiB0aW1lXHJcbiAgICAgIGF3YWl0IHF1ZXJ5KFxyXG4gICAgICAgICdVUERBVEUgdXNlcnMgU0VUIGxhc3RfbG9naW4gPSBDVVJSRU5UX1RJTUVTVEFNUCBXSEVSRSB1c2VyX2lkID0gJDEnLFxyXG4gICAgICAgIFt1c2VyLnVzZXJfaWRdXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgc2Vzc2lvblxyXG4gICAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSBhd2FpdCBhdXRoLmNyZWF0ZVNlc3Npb24odXNlci51c2VyX2lkKTtcclxuXHJcbiAgICAgIC8vIFNldCBzZXNzaW9uIGNvb2tpZVxyXG4gICAgICByZXMuc2V0SGVhZGVyKCdTZXQtQ29va2llJywgY29va2llLnNlcmlhbGl6ZSgnc2Vzc2lvbl90b2tlbicsIHNlc3Npb25Ub2tlbiwge1xyXG4gICAgICAgIGh0dHBPbmx5OiB0cnVlLFxyXG4gICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcclxuICAgICAgICBtYXhBZ2U6IDYwICogNjAgKiAyNCAqIDcsIC8vIDEgd2Vla1xyXG4gICAgICAgIHNhbWVTaXRlOiAnc3RyaWN0JyxcclxuICAgICAgICBwYXRoOiAnLydcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIHVzZXIgaW5mbyB3aXRob3V0IHNlbnNpdGl2ZSBkYXRhXHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgaWQ6IHVzZXIudXNlcl9pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgZmlyc3ROYW1lOiB1c2VyLmZpcnN0X25hbWUsXHJcbiAgICAgICAgICBsYXN0TmFtZTogdXNlci5sYXN0X25hbWUsXHJcbiAgICAgICAgICBhY2NvdW50SWQ6IHVzZXIuYWNjb3VudF9pZCxcclxuICAgICAgICAgIGFjY291bnROYW1lOiB1c2VyLmFjY291bnRfbmFtZSxcclxuICAgICAgICAgIHJvbGU6IHVzZXIucm9sZV9uYW1lLFxyXG4gICAgICAgICAgaXNBZG1pbjogdXNlci5pc19hY2NvdW50X2FkbWluXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXNzaW9uVG9rZW4gLy8gQ2xpZW50IHdpbGwgc3RvcmUgdGhpcyBpbiBhIGNvb2tpZVxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGRiRXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2Ugb3BlcmF0aW9uIGVycm9yIGR1cmluZyBsb2dpbjonLCBkYkVycm9yKTtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBIGRhdGFiYXNlIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgY2hlY2sgeW91ciBkYXRhYmFzZSBjb25maWd1cmF0aW9uLicgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGxvZ2luJyB9KTtcclxuICB9XHJcbn0iXSwibmFtZXMiOlsiY29va2llIiwiYXV0aCIsInF1ZXJ5IiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImVtYWlsIiwicGFzc3dvcmQiLCJib2R5IiwidXNlciIsImZpbmRVc2VyQnlFbWFpbCIsImlzX2FjdGl2ZSIsImFjY291bnRfaXNfYWN0aXZlIiwicGFzc3dvcmRWYWxpZCIsImNvbXBhcmVQYXNzd29yZCIsInBhc3N3b3JkX2hhc2giLCJ1c2VyX2lkIiwic2Vzc2lvblRva2VuIiwiY3JlYXRlU2Vzc2lvbiIsInNldEhlYWRlciIsInNlcmlhbGl6ZSIsImh0dHBPbmx5Iiwic2VjdXJlIiwicHJvY2VzcyIsIm1heEFnZSIsInNhbWVTaXRlIiwicGF0aCIsImlkIiwiZmlyc3ROYW1lIiwiZmlyc3RfbmFtZSIsImxhc3ROYW1lIiwibGFzdF9uYW1lIiwiYWNjb3VudElkIiwiYWNjb3VudF9pZCIsImFjY291bnROYW1lIiwiYWNjb3VudF9uYW1lIiwicm9sZSIsInJvbGVfbmFtZSIsImlzQWRtaW4iLCJpc19hY2NvdW50X2FkbWluIiwiZGJFcnJvciIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/auth/login.js\n");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "cookie":
/*!*************************!*\
  !*** external "cookie" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("cookie");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("uuid");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cauth%5Clogin.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();