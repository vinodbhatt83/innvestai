"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/properties/search";
exports.ids = ["pages/api/properties/search"];
exports.modules = {

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproperties%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproperties%5Csearch.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproperties%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproperties%5Csearch.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_properties_search_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\properties\\search.js */ \"(api-node)/./pages/api/properties/search.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_properties_search_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_properties_search_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/properties/search\",\n        pathname: \"/api/properties/search\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_properties_search_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcHJvcGVydGllcyUyRnNlYXJjaCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDcHJvcGVydGllcyU1Q3NlYXJjaC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUNnRTtBQUNoRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNERBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDREQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHByb3BlcnRpZXNcXFxcc2VhcmNoLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm9wZXJ0aWVzL3NlYXJjaFwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Byb3BlcnRpZXMvc2VhcmNoXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproperties%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproperties%5Csearch.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/properties/search.js":
/*!****************************************!*\
  !*** ./pages/api/properties/search.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n// pages/api/properties/search.js\n\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    // Get the search query from the request\n    const { query: searchQuery } = req.query;\n    console.log('Search query received:', searchQuery);\n    if (!searchQuery || searchQuery.length < 2) {\n        console.log('Search query too short, returning empty results');\n        return res.status(200).json({\n            properties: []\n        });\n    }\n    try {\n        // Dynamically adapt to your database schema\n        console.log('Determining database schema...');\n        // Get information about the dim_property table\n        const tableCheckQuery = `\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'dim_property'\n      );\n    `;\n        const tableExists = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tableCheckQuery);\n        console.log('dim_property table exists:', tableExists.rows[0].exists);\n        // If the dim_property table doesn't exist, we should check for alternative tables\n        if (!tableExists.rows[0].exists) {\n            console.log('dim_property table not found, checking for alternative property tables...');\n            // Check for any table that might contain properties\n            const alternativeTablesQuery = `\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND (\n          table_name LIKE '%property%' \n          OR table_name LIKE '%hotel%' \n          OR table_name LIKE '%properties%'\n        );\n      `;\n            const alternativeTables = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(alternativeTablesQuery);\n            console.log('Alternative property tables found:', alternativeTables.rows);\n            if (alternativeTables.rows.length === 0) {\n                console.log('No property tables found, returning empty results');\n                return res.status(200).json({\n                    properties: []\n                });\n            }\n            // Use the first alternative table\n            const alternativeTable = alternativeTables.rows[0].table_name;\n            console.log('Using alternative table:', alternativeTable);\n            // Get columns from alternative table\n            const columnsQuery = `\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_schema = 'public' \n        AND table_name = $1;\n      `;\n            const columns = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(columnsQuery, [\n                alternativeTable\n            ]);\n            const columnNames = columns.rows.map((row)=>row.column_name);\n            console.log('Columns in alternative table:', columnNames);\n            // Find ID column (look for any column with 'id' or 'key' in the name)\n            const idColumn = columnNames.find((col)=>col.includes('id') || col.includes('key')) || columnNames[0];\n            // Find name column (look for any column with 'name' in the name)\n            const nameColumn = columnNames.find((col)=>col.includes('name')) || columnNames[1];\n            // Perform search on alternative table\n            const searchQuery = `\n        SELECT \n          ${idColumn} as property_key, \n          ${nameColumn} as property_name\n        FROM ${alternativeTable}\n        WHERE ${nameColumn} ILIKE $1\n        LIMIT 10;\n      `;\n            console.log('Running search query on alternative table:', searchQuery);\n            const searchResults = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(searchQuery, [\n                `%${searchQuery}%`\n            ]);\n            return res.status(200).json({\n                properties: searchResults.rows\n            });\n        }\n        // If we reach here, the dim_property table exists\n        // Get the columns from the dim_property table\n        const columnsQuery = `\n      SELECT column_name \n      FROM information_schema.columns \n      WHERE table_schema = 'public' \n      AND table_name = 'dim_property';\n    `;\n        const columns = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(columnsQuery);\n        const columnNames = columns.rows.map((row)=>row.column_name);\n        console.log('Columns in dim_property:', columnNames);\n        // Determine key columns to use in the query\n        const idColumn = columnNames.includes('property_key') ? 'property_key' : columnNames.includes('id') ? 'id' : columnNames.find((col)=>col.includes('id') || col.includes('key')) || 'id';\n        const nameColumn = columnNames.includes('property_name') ? 'property_name' : columnNames.includes('name') ? 'name' : columnNames.find((col)=>col.includes('name')) || 'property_name';\n        const addressColumn = columnNames.includes('address') ? 'address' : columnNames.includes('property_address') ? 'property_address' : null;\n        const roomsColumn = columnNames.includes('number_of_rooms') ? 'number_of_rooms' : columnNames.includes('rooms') ? 'rooms' : null;\n        const typeColumn = columnNames.includes('property_type') ? 'property_type' : columnNames.includes('type') ? 'type' : columnNames.includes('hotel_type_key') ? 'hotel_type_key' : null;\n        // Check if we have city and state columns or need to join with other tables\n        const hasCityColumn = columnNames.includes('city') || columnNames.includes('city_key');\n        const hasStateColumn = columnNames.includes('state') || columnNames.includes('state_key');\n        // Build the search query based on available columns\n        let searchQueryText = `\n      SELECT \n        p.${idColumn} as property_key, \n        p.${nameColumn} as property_name\n    `;\n        if (addressColumn) {\n            searchQueryText += `, p.${addressColumn} as property_address`;\n        }\n        if (roomsColumn) {\n            searchQueryText += `, p.${roomsColumn} as number_of_rooms`;\n        }\n        // Handle city and state\n        if (hasCityColumn) {\n            if (columnNames.includes('city')) {\n                searchQueryText += `, p.city`;\n            } else if (columnNames.includes('city_key')) {\n                // Check if dim_city table exists for joining\n                const cityTableQuery = `\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name = 'dim_city'\n          );\n        `;\n                const cityTableExists = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(cityTableQuery);\n                if (cityTableExists.rows[0].exists) {\n                    searchQueryText += `, c.city_name as city`;\n                }\n            }\n        }\n        if (hasStateColumn) {\n            if (columnNames.includes('state')) {\n                searchQueryText += `, p.state`;\n            } else if (columnNames.includes('state_key')) {\n                // Check if dim_state table exists for joining\n                const stateTableQuery = `\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name = 'dim_state'\n          );\n        `;\n                const stateTableExists = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(stateTableQuery);\n                if (stateTableExists.rows[0].exists) {\n                    searchQueryText += `, s.state_name as state`;\n                }\n            }\n        }\n        // Handle property type\n        if (typeColumn) {\n            if (typeColumn === 'property_type' || typeColumn === 'type') {\n                searchQueryText += `, p.${typeColumn} as property_type`;\n            } else if (typeColumn === 'hotel_type_key') {\n                // Check if dim_hotel_type table exists for joining\n                const typeTableQuery = `\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name = 'dim_hotel_type'\n          );\n        `;\n                const typeTableExists = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(typeTableQuery);\n                if (typeTableExists.rows[0].exists) {\n                    searchQueryText += `, h.hotel_type_name as property_type`;\n                }\n            }\n        }\n        // FROM clause\n        searchQueryText += `\\nFROM dim_property p`;\n        // Add JOINs if needed\n        if (columnNames.includes('city_key') && hasCityColumn) {\n            searchQueryText += `\\nLEFT JOIN dim_city c ON p.city_key = c.city_key`;\n        }\n        if (hasStateColumn && columnNames.includes('state_key')) {\n            searchQueryText += `\\nLEFT JOIN dim_state s ON p.state_key = s.state_key`;\n        } else if (hasCityColumn && columnNames.includes('city_key')) {\n            // Join state through city\n            searchQueryText += `\\nLEFT JOIN dim_state s ON c.state_key = s.state_key`;\n        }\n        if (typeColumn === 'hotel_type_key') {\n            searchQueryText += `\\nLEFT JOIN dim_hotel_type h ON p.hotel_type_key = h.hotel_type_key`;\n        }\n        // WHERE clause - search by property name\n        searchQueryText += `\\nWHERE p.${nameColumn} ILIKE $1`;\n        // LIMIT clause\n        searchQueryText += `\\nLIMIT 10`;\n        console.log('Final search query:', searchQueryText);\n        // Execute the search query\n        const searchResults = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(searchQueryText, [\n            `%${searchQuery}%`\n        ]);\n        console.log('Search returned', searchResults.rows.length, 'results');\n        return res.status(200).json({\n            properties: searchResults.rows\n        });\n    } catch (error) {\n        console.error('Error searching properties:', error);\n        return res.status(500).json({\n            error: 'Failed to search properties',\n            details: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/properties/search.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fproperties%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cproperties%5Csearch.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();