"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/deals/[id]";
exports.ids = ["pages/api/deals/[id]"];
exports.modules = {

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountManager: () => (/* binding */ accountManager),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   clientAccountManager: () => (/* binding */ clientAccountManager),\n/* harmony export */   clientAuth: () => (/* binding */ clientAuth)\n/* harmony export */ });\n// lib/auth.js\n// Declare variables to hold modules\nlet bcrypt;\nlet uuidv4;\nlet queryFn;\nlet poolObj;\n// Only initialize on the server\nif (true) {\n    try {\n        // Server-side imports\n        bcrypt = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n        const { v4 } = __webpack_require__(/*! uuid */ \"uuid\");\n        uuidv4 = v4;\n        // Import database functions - using dynamic import to avoid webpack issues\n        const dbModule = __webpack_require__(/*! ./db.js */ \"(api-node)/./lib/db.js\");\n        queryFn = dbModule.query;\n        poolObj = dbModule.pool;\n    } catch (error) {\n        console.error('Error initializing auth module:', error);\n        // Provide fallbacks if imports fail\n        bcrypt = {\n            hash: async ()=>'hash-function-not-available',\n            compare: async ()=>false\n        };\n        uuidv4 = ()=>'uuid-function-not-available';\n        queryFn = async ()=>{\n            throw new Error('Database query function not available');\n        };\n        poolObj = {\n            query: async ()=>{\n                throw new Error('Database pool not available');\n            }\n        };\n    }\n} else {}\n// Simple session-based authentication\nconst auth = {\n    // Create a hashed password\n    async hashPassword (password) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.hash(password, 10);\n    },\n    // Compare password with hash\n    async comparePassword (password, hash) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.compare(password, hash);\n    },\n    // Find user by email - server only\n    async findUserByEmail (email) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name \n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.email = $1`, [\n                email\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by email:', error);\n            throw error;\n        }\n    },\n    // Find user by ID - server only\n    async findUserById (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.user_id = $1`, [\n                userId\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by ID:', error);\n            throw error;\n        }\n    },\n    // Create a new session - server only\n    async createSession (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const sessionToken = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiration\n        try {\n            await queryFn('INSERT INTO sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                sessionToken,\n                expiresAt\n            ]);\n            return sessionToken;\n        } catch (error) {\n            console.error('Error creating session:', error);\n            throw error;\n        }\n    },\n    // Verify a session token - server only\n    async verifySession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        console.log('verifySession called with token', {\n            tokenLength: sessionToken ? sessionToken.length : 0,\n            tokenPrefix: sessionToken ? sessionToken.substring(0, 8) + '...' : 'none'\n        });\n        try {\n            const result = await queryFn(`SELECT u.*, s.session_id, s.expires_at, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM sessions s\n         JOIN users u ON s.user_id = u.user_id\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE s.session_token = $1 AND s.expires_at > NOW()`, [\n                sessionToken\n            ]);\n            console.log('verifySession query result', {\n                found: result.rowCount > 0,\n                userData: result.rowCount > 0 ? {\n                    user_id: result.rows[0].user_id,\n                    email: result.rows[0].email,\n                    account_id: result.rows[0].account_id,\n                    is_account_admin: result.rows[0].is_account_admin,\n                    account_name: result.rows[0].account_name,\n                    role_name: result.rows[0].role_name\n                } : null\n            });\n            // Add standard property names for consistency\n            if (result.rowCount > 0) {\n                const user = result.rows[0];\n                // Map database field names to the camelCase format expected by frontend\n                user.id = user.user_id;\n                user.firstName = user.first_name;\n                user.lastName = user.last_name;\n                user.accountId = user.account_id;\n                user.isAdmin = user.is_account_admin;\n                user.accountName = user.account_name;\n            }\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying session:', error);\n            throw error;\n        }\n    },\n    // Invalidate a session - server only\n    async invalidateSession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            await queryFn('DELETE FROM sessions WHERE session_token = $1', [\n                sessionToken\n            ]);\n            return true;\n        } catch (error) {\n            console.error('Error invalidating session:', error);\n            throw error;\n        }\n    },\n    // Create a password reset token - server only\n    async createPasswordResetToken (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const token = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setHours(expiresAt.getHours() + 24); // 24 hours expiration\n        try {\n            await queryFn('INSERT INTO password_reset_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                token,\n                expiresAt\n            ]);\n            return token;\n        } catch (error) {\n            console.error('Error creating password reset token:', error);\n            throw error;\n        }\n    },\n    // Verify a password reset token - server only\n    async verifyResetToken (token) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn('SELECT * FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW()', [\n                token\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying reset token:', error);\n            throw error;\n        }\n    },\n    // Reset password - server only\n    async resetPassword (token, newPassword) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const tokenRecord = await this.verifyResetToken(token);\n            if (!tokenRecord) {\n                return {\n                    success: false,\n                    error: 'Invalid or expired token'\n                };\n            }\n            const passwordHash = await this.hashPassword(newPassword);\n            // Update password\n            await queryFn('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE user_id = $2', [\n                passwordHash,\n                tokenRecord.user_id\n            ]);\n            // Delete the token\n            await queryFn('DELETE FROM password_reset_tokens WHERE token_id = $1', [\n                tokenRecord.token_id\n            ]);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error resetting password:', error);\n            throw error;\n        }\n    }\n};\n// Account management - all methods are server-only\nconst accountManager = {\n    // Create a new account with admin user\n    async createAccount (accountData, userData) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            // Start a transaction\n            await queryFn('BEGIN');\n            // Create account\n            const accountResult = await queryFn('INSERT INTO accounts (account_name, account_domain, plan_id, billing_email) VALUES ($1, $2, $3, $4) RETURNING *', [\n                accountData.accountName,\n                accountData.accountDomain || null,\n                accountData.planId || 1,\n                accountData.billingEmail\n            ]);\n            const account = accountResult.rows[0];\n            // Hash password\n            const passwordHash = await auth.hashPassword(userData.password);\n            // Create admin user (role_id 1 = Admin)\n            const userResult = await queryFn(`INSERT INTO users (account_id, email, password_hash, first_name, last_name, role_id, is_account_admin) \n         VALUES ($1, $2, $3, $4, $5, 1, TRUE) RETURNING *`, [\n                account.account_id,\n                userData.email,\n                passwordHash,\n                userData.firstName,\n                userData.lastName\n            ]);\n            const admin = userResult.rows[0];\n            // Commit transaction\n            await queryFn('COMMIT');\n            return {\n                account,\n                admin\n            };\n        } catch (error) {\n            // Rollback transaction on error\n            await queryFn('ROLLBACK');\n            console.error('Error creating account:', error);\n            throw error;\n        }\n    }\n};\n// Create mock implementations for client-side use\nconst createMockAuth = ()=>{\n    const mockAuth = {\n        // Mock implementations that are safe to use on the client\n        async hashPassword (password) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.hashPassword(password);\n            }\n            // On client, just return a placeholder (real hashing happens server-side)\n            console.warn('hashPassword called on client, real hashing will happen server-side');\n            return `mock-hash-${password.length}`;\n        },\n        async comparePassword (password, hash) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.comparePassword(password, hash);\n            }\n            // On client, just return a placeholder (real comparison happens server-side)\n            console.warn('comparePassword called on client, real comparison will happen server-side');\n            return false;\n        },\n        // These methods should be called via API endpoints on the client\n        async findUserByEmail () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async findUserById () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifySession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async invalidateSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createPasswordResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifyResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async resetPassword () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAuth;\n};\n// Create a mock account manager for client-side use\nconst createMockAccountManager = ()=>{\n    const mockAccountManager = {\n        // All methods should be called via API endpoints on the client\n        async createAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async getAccountUsers () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAccountManager;\n};\n// Export the appropriate implementations based on environment\nconst clientAuth =  false ? 0 : auth;\nconst clientAccountManager =  false ? 0 : accountManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./middleware/auth.js":
/*!****************************!*\
  !*** ./middleware/auth.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiAuthMiddleware: () => (/* binding */ apiAuthMiddleware),\n/* harmony export */   authMiddleware: () => (/* binding */ authMiddleware),\n/* harmony export */   getAuthenticatedUser: () => (/* binding */ getAuthenticatedUser),\n/* harmony export */   isAuthenticated: () => (/* binding */ isAuthenticated),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthRedirect: () => (/* binding */ withAuthRedirect),\n/* harmony export */   withPermission: () => (/* binding */ withPermission)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(api-node)/./node_modules/next/server.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_server__WEBPACK_IMPORTED_MODULE_0__);\n// middleware/auth.js\n\n// This middleware runs on the server (Edge runtime)\nasync function authMiddleware(req) {\n    const { pathname } = req.nextUrl;\n    // Public paths that don't require authentication\n    const publicPaths = [\n        '/login',\n        '/signup',\n        '/reset-password',\n        '/api/auth/login',\n        '/api/auth/signup',\n        '/api/auth/reset-password',\n        '/api/debug'\n    ];\n    // Check if the path is public\n    const isPublicPath = publicPaths.some((path)=>pathname === path || pathname.startsWith(path + '/'));\n    // Allow access to public paths\n    if (isPublicPath) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // Get the session token from cookies\n    const sessionToken = req.cookies.get('session_token')?.value;\n    // If no session token, redirect to login\n    if (!sessionToken) {\n        const url = new URL('/login', req.url);\n        url.searchParams.set('redirect', pathname);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n    }\n    // Note: We can't verify the session here since Edge runtime doesn't support database connections\n    // We'll rely on API routes to verify the session on each request that needs it\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n}\n// This is used client-side to check if user is authenticated\nasync function isAuthenticated() {\n    // This only runs in the browser\n    if (true) {\n        return false;\n    }\n    // Check for session token cookie\n    const cookies = document.cookie.split(';').reduce((acc, cookie)=>{\n        const [key, value] = cookie.trim().split('=');\n        acc[key] = value;\n        return acc;\n    }, {});\n    return !!cookies.session_token;\n}\n// This is only used server-side in API routes and server components\nconst apiAuthMiddleware = async (req, res, next)=>{\n    console.log('apiAuthMiddleware called', {\n        url: req.url,\n        method: req.method,\n        query: req.query\n    });\n    // Only run this on the server\n    if (false) {}\n    // Get the session token from cookies\n    const cookies = req.cookies;\n    const sessionToken = cookies.session_token;\n    console.log('Session token check', {\n        hasToken: !!sessionToken,\n        cookiesReceived: Object.keys(cookies)\n    });\n    // If no session token, return unauthorized\n    if (!sessionToken) {\n        console.log('No session token found, authentication required');\n        return res.status(401).json({\n            error: 'Authentication required'\n        });\n    }\n    try {\n        console.log('Verifying session token');\n        // Import auth only on server-side\n        const { auth } = __webpack_require__(/*! ../lib/auth */ \"(api-node)/./lib/auth.js\");\n        // Verify the session\n        const user = await auth.verifySession(sessionToken);\n        console.log('Session verification result', {\n            hasUser: !!user,\n            userId: user?.id,\n            userEmail: user?.email\n        });\n        // If session is invalid, return unauthorized\n        if (!user) {\n            console.log('Invalid or expired session');\n            return res.status(401).json({\n                error: 'Invalid or expired session'\n            });\n        }\n        // Attach user to request object\n        req.user = user;\n        console.log('User authenticated successfully', {\n            id: user.id,\n            email: user.email,\n            accountId: user.accountId,\n            isAdmin: user.isAdmin || user.is_account_admin\n        });\n        // Continue to the next middleware or handler\n        if (next) {\n            return next();\n        }\n        return true;\n    } catch (error) {\n        console.error('Auth middleware error:', error);\n        return res.status(500).json({\n            error: 'Authentication error'\n        });\n    }\n};\n// For use in API routes to get the authenticated user\nconst getAuthenticatedUser = async (req, res)=>{\n    const isAuthenticated = await apiAuthMiddleware(req, res);\n    return isAuthenticated === true ? req.user : null;\n};\n// withAuth HOC for protecting API routes with authentication\nconst withAuth = (handler)=>{\n    return async (req, res)=>{\n        try {\n            // Check if user is authenticated\n            const result = await apiAuthMiddleware(req, res);\n            // If the middleware returned a status code, it handled unauthorized\n            if (result !== true) {\n                return result;\n            }\n            // User is authenticated, so execute the handler\n            return await handler(req, res);\n        } catch (error) {\n            console.error('Error in withAuth middleware:', error);\n            return res.status(500).json({\n                error: 'An internal server error occurred'\n            });\n        }\n    };\n};\n// withPermission HOC for protecting API routes that need specific permissions\nconst withPermission = (handler, permission)=>{\n    return async (req, res)=>{\n        try {\n            console.log(`withPermission middleware called for permission: ${permission}`);\n            // First check authentication\n            const authResult = await apiAuthMiddleware(req, res);\n            if (authResult !== true) {\n                console.log('Authentication failed in withPermission', {\n                    authResult\n                });\n                return authResult;\n            }\n            console.log('User authenticated in withPermission', {\n                userId: req.user?.id,\n                email: req.user?.email,\n                permissions: req.user?.permissions,\n                isAccountAdmin: req.user?.is_account_admin\n            });\n            // Check permission - allow access if:\n            // 1. The user has the specific permission, OR\n            // 2. The user has 'all' permissions, OR\n            // 3. The user is an account admin\n            // 4. If no specific permission is required (null/undefined)\n            const user = req.user;\n            const hasPermission = !permission || user.permissions && (user.permissions[permission] === true || user.permissions.all === true || user.is_account_admin === true);\n            if (!hasPermission) {\n                console.log('Permission denied in withPermission', {\n                    requiredPermission: permission,\n                    userPermissions: user.permissions,\n                    isAdmin: user.is_account_admin\n                });\n                return res.status(403).json({\n                    error: 'You do not have permission to access this resource'\n                });\n            }\n            console.log('Permission granted in withPermission', {\n                permission\n            });\n            // User is authenticated and has permission, so execute the handler\n            return await handler(req, res);\n        } catch (error) {\n            console.error('Error in withPermission middleware:', error);\n            return res.status(500).json({\n                error: 'An internal server error occurred'\n            });\n        }\n    };\n};\n// withAuthRedirect HOC for client-side auth checking with redirect\nconst withAuthRedirect = (Component, options = {\n    adminOnly: false\n})=>{\n    // This is just a wrapper around withAuthProtection for consistency\n    return Component;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./middleware/auth.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\deals\\[id].js */ \"(api-node)/./pages/api/deals/[id].js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/deals/[id]\",\n        pathname: \"/api/deals/[id]\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_deals_id_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZGVhbHMlMkYlNUJpZCU1RCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZGVhbHMlNUMlNUJpZCU1RC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUN5RDtBQUN6RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsbURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLG1EQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGRlYWxzXFxcXFtpZF0uanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2RlYWxzL1tpZF1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZWFscy9baWRdXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/deals/[id].js":
/*!*********************************!*\
  !*** ./pages/api/deals/[id].js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n/* harmony import */ var _utils_activityLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/activityLogger */ \"(api-node)/./utils/activityLogger.js\");\n/* harmony import */ var _middleware_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../middleware/auth */ \"(api-node)/./middleware/auth.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_activityLogger__WEBPACK_IMPORTED_MODULE_1__]);\n_utils_activityLogger__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/deals/[id].js\n\n\n\nasync function handler(req, res) {\n    const { id } = req.query;\n    if (req.method === 'GET') {\n        try {\n            // First, check which tables and columns exist in the database\n            const tablesQuery = `\n        SELECT table_name \n        FROM information_schema.tables \n        WHERE table_schema = 'public'\n      `;\n            const tablesResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tablesQuery);\n            const existingTables = tablesResult.rows.map((row)=>row.table_name);\n            console.log('Existing tables:', existingTables);\n            // Build query dynamically based on existing tables\n            let dealQuery = 'SELECT d.*';\n            let fromClause = ' FROM deals d';\n            let whereClause = ' WHERE d.deal_id = $1 OR d.deal_id = $1';\n            // Check if dim_property exists and add the join\n            if (existingTables.includes('dim_property')) {\n                // Get columns from dim_property\n                const propertyColumnsQuery = `\n          SELECT column_name \n          FROM information_schema.columns \n          WHERE table_schema = 'public' AND table_name = 'dim_property'\n        `;\n                const propertyColumns = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(propertyColumnsQuery);\n                const propertyColumnNames = propertyColumns.rows.map((row)=>row.column_name);\n                // Find property id column\n                const propertyIdColumn = propertyColumnNames.includes('property_key') ? 'property_key' : propertyColumnNames.includes('id') ? 'id' : 'property_id';\n                // Find deal's property reference column\n                const dealColumnsQuery = `\n          SELECT column_name \n          FROM information_schema.columns \n          WHERE table_schema = 'public' AND table_name = 'deals'\n        `;\n                const dealColumns = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(dealColumnsQuery);\n                const dealColumnNames = dealColumns.rows.map((row)=>row.column_name);\n                // Find property reference in deals table\n                const dealPropertyColumn = dealColumnNames.includes('property_id') ? 'property_id' : dealColumnNames.includes('property_key') ? 'property_key' : null;\n                if (dealPropertyColumn) {\n                    dealQuery += ', p.demo_name';\n                    if (propertyColumnNames.includes('address')) {\n                        dealQuery += ', p.address as property_address';\n                    }\n                    fromClause += ` LEFT JOIN dim_property p ON d.${dealPropertyColumn} = p.${propertyIdColumn}`;\n                    // Add additional joins based on existing tables\n                    if (existingTables.includes('dim_city') && propertyColumnNames.includes('city_key')) {\n                        dealQuery += ', c.city_name';\n                        fromClause += ' LEFT JOIN dim_city c ON p.city_key = c.city_key';\n                        if (existingTables.includes('dim_state')) {\n                            dealQuery += ', s.state_name';\n                            fromClause += ' LEFT JOIN dim_state s ON c.state_key = s.state_key';\n                        }\n                    }\n                    if (existingTables.includes('dim_brand') && propertyColumnNames.includes('brand_key')) {\n                        dealQuery += ', b.brand_name';\n                        fromClause += ' LEFT JOIN dim_brand b ON p.brand_key = b.brand_key';\n                    }\n                    if (existingTables.includes('dim_hotel_type') && propertyColumnNames.includes('hotel_type_key')) {\n                        dealQuery += ', ht.hotel_type_name';\n                        fromClause += ' LEFT JOIN dim_hotel_type ht ON p.hotel_type_key = ht.hotel_type_key';\n                    }\n                    if (existingTables.includes('dim_market') && propertyColumnNames.includes('market_key')) {\n                        dealQuery += ', m.market_name';\n                        fromClause += ' LEFT JOIN dim_market m ON p.market_key = m.market_key';\n                        if (existingTables.includes('dim_region')) {\n                            dealQuery += ', r.region_name';\n                            fromClause += ' LEFT JOIN dim_region r ON m.region_key = r.region_key';\n                        }\n                    }\n                    if (existingTables.includes('dim_chain_scale') && propertyColumnNames.includes('chain_scale_key')) {\n                        dealQuery += ', cs.chain_scale_name';\n                        fromClause += ' LEFT JOIN dim_chain_scale cs ON p.chain_scale_key = cs.chain_scale_key';\n                    }\n                }\n            }\n            const finalQuery = dealQuery + fromClause + whereClause;\n            console.log('Deal query:', finalQuery);\n            const dealResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(finalQuery, [\n                id\n            ]);\n            if (dealResult.rows.length === 0) {\n                return res.status(404).json({\n                    error: 'Deal not found'\n                });\n            }\n            const deal = dealResult.rows[0];\n            console.log('Deal data:', deal);\n            // Initialize market data\n            let marketTrends = [];\n            let marketComparison = [];\n            let performanceMetrics = {\n                revpar: 125.75,\n                adr: 160.80,\n                occupancy: 0.782,\n                cap_rate: 0.068\n            };\n            // Try to fetch market trends data if available\n            if (existingTables.includes('fact_market_data') && deal.market_key) {\n                try {\n                    const trendsQuery = `\n            SELECT year, month, revpar, adr, occupancy\n            FROM fact_market_data\n            WHERE market_key = $1\n            ORDER BY year, month\n          `;\n                    const trendsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(trendsQuery, [\n                        deal.market_key\n                    ]);\n                    marketTrends = trendsResult.rows;\n                } catch (error) {\n                    console.error('Error fetching market trends:', error);\n                    // Use generated data if there's an error\n                    marketTrends = generateMockMarketTrends();\n                }\n            } else {\n                // Generate mock market trends data\n                marketTrends = generateMockMarketTrends();\n            }\n            // Try to fetch market comparison data if available\n            if (existingTables.includes('fact_market_data') && existingTables.includes('dim_market') && deal.region_key) {\n                try {\n                    const comparisonQuery = `\n            SELECT \n              m.market_name,\n              AVG(fmd.revpar) as avg_revpar,\n              AVG(fmd.adr) as avg_adr,\n              AVG(fmd.occupancy) as avg_occupancy\n            FROM dim_market m\n            JOIN fact_market_data fmd ON m.market_key = fmd.market_key\n            WHERE m.region_key = $1 AND m.market_key != $2\n            GROUP BY m.market_name\n            LIMIT 3\n          `;\n                    const comparisonResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(comparisonQuery, [\n                        deal.region_key,\n                        deal.market_key || 0\n                    ]);\n                    marketComparison = comparisonResult.rows;\n                } catch (error) {\n                    console.error('Error fetching market comparison:', error);\n                    // Use generated data if there's an error\n                    marketComparison = generateMockMarketComparison();\n                }\n            } else {\n                // Generate mock market comparison data\n                marketComparison = generateMockMarketComparison();\n            }\n            // Try to fetch performance metrics if available\n            if (existingTables.includes('fact_market_data') && deal.market_key) {\n                try {\n                    const performanceQuery = `\n            SELECT \n              AVG(revpar) as revpar,\n              AVG(adr) as adr,\n              AVG(occupancy) as occupancy,\n              AVG(revpar_growth) as revpar_growth\n            FROM fact_market_data\n            WHERE market_key = $1 AND year = 2023\n          `;\n                    const performanceResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(performanceQuery, [\n                        deal.market_key\n                    ]);\n                    if (performanceResult.rows.length > 0) {\n                        performanceMetrics = {\n                            ...performanceMetrics,\n                            ...performanceResult.rows[0]\n                        };\n                    }\n                } catch (error) {\n                    console.error('Error fetching performance metrics:', error);\n                // Keep default performance metrics if there's an error\n                }\n            }\n            // Combine all data and add fallbacks\n            const dealDetails = addFallbackData({\n                ...deal,\n                market_trends: marketTrends,\n                market_comparison: marketComparison,\n                performance_metrics: performanceMetrics\n            });\n            res.status(200).json(dealDetails);\n        } catch (error) {\n            console.error('Error fetching deal details:', error);\n            res.status(500).json({\n                error: 'Failed to fetch deal details',\n                details: error.message\n            });\n        }\n    } else if (req.method === 'PUT') {\n        try {\n            const { deal_name, property_name, property_address, city, state, number_of_rooms, property_type, status } = req.body;\n            // Validate required fields\n            if (!deal_name) {\n                return res.status(400).json({\n                    error: 'Deal name is required'\n                });\n            }\n            // Get the current column names for the deals table\n            const dealColumnsQuery = `\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_schema = 'public' AND table_name = 'deals'\n      `;\n            const dealColumns = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(dealColumnsQuery);\n            const dealColumnNames = dealColumns.rows.map((row)=>row.column_name);\n            // Build the update query dynamically based on available columns\n            const updateFields = [];\n            const queryParams = [\n                id\n            ]; // First param is the deal ID\n            let paramIndex = 2; // Starts at 2 since $1 is used for deal_id\n            if (dealColumnNames.includes('deal_name')) {\n                updateFields.push(`deal_name = $${paramIndex++}`);\n                queryParams.push(deal_name);\n            }\n            if (dealColumnNames.includes('property_name')) {\n                updateFields.push(`property_name = $${paramIndex++}`);\n                queryParams.push(property_name);\n            }\n            if (dealColumnNames.includes('property_address')) {\n                updateFields.push(`property_address = $${paramIndex++}`);\n                queryParams.push(property_address);\n            }\n            if (dealColumnNames.includes('city')) {\n                updateFields.push(`city = $${paramIndex++}`);\n                queryParams.push(city);\n            }\n            if (dealColumnNames.includes('state')) {\n                updateFields.push(`state = $${paramIndex++}`);\n                queryParams.push(state);\n            }\n            if (dealColumnNames.includes('number_of_rooms')) {\n                updateFields.push(`number_of_rooms = $${paramIndex++}`);\n                queryParams.push(number_of_rooms ? parseInt(number_of_rooms) : null);\n            }\n            if (dealColumnNames.includes('property_type')) {\n                updateFields.push(`property_type = $${paramIndex++}`);\n                queryParams.push(property_type);\n            }\n            if (dealColumnNames.includes('status')) {\n                updateFields.push(`status = $${paramIndex++}`);\n                queryParams.push(status);\n            }\n            if (dealColumnNames.includes('updated_at')) {\n                updateFields.push(`updated_at = CURRENT_TIMESTAMP`);\n            }\n            if (updateFields.length === 0) {\n                return res.status(400).json({\n                    error: 'No valid fields to update'\n                });\n            }\n            const updateQuery = `\n        UPDATE deals \n        SET ${updateFields.join(', ')} \n        WHERE deal_id = $1 \n        RETURNING *`;\n            console.log('Update query:', updateQuery);\n            console.log('Query params:', queryParams);\n            const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(updateQuery, queryParams);\n            if (result.rows.length === 0) {\n                return res.status(404).json({\n                    error: 'Deal not found or could not be updated'\n                });\n            }\n            // Log the activity\n            try {\n                await (0,_utils_activityLogger__WEBPACK_IMPORTED_MODULE_1__.saveActivityLog)({\n                    user_id: req.user?.id || req.user?.user_id || 'system',\n                    action: 'UPDATE_DEAL',\n                    entity_type: 'DEAL',\n                    entity_id: id,\n                    details: `Updated deal ${deal_name}`\n                });\n            } catch (logError) {\n                console.error('Error logging deal update activity:', logError);\n            // Continue even if logging fails\n            }\n            res.status(200).json(result.rows[0]);\n        } catch (error) {\n            console.error('Error updating deal:', error);\n            res.status(500).json({\n                error: 'Failed to update deal',\n                details: error.message\n            });\n        }\n    } else {\n        res.setHeader('Allow', [\n            'GET',\n            'PUT'\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n// Add fallback data for missing fields\nconst addFallbackData = (deal)=>{\n    // Basic deal info fallbacks\n    deal.deal_name = deal.deal_name || `${deal.property_name || 'Hotel'} Investment`;\n    deal.investment_amount = deal.investment_amount || 1000000;\n    deal.expected_return = deal.expected_return || 8.5;\n    deal.status = deal.status || 'Draft';\n    // Property info fallbacks\n    deal.property_name = deal.property_name || 'Hotel Property';\n    deal.property_address = deal.property_address || '123 Main Street';\n    deal.city_name = deal.city_name || 'New York';\n    deal.state_name = deal.state_name || 'NY';\n    deal.hotel_type_name = deal.hotel_type_name || 'Luxury';\n    // Market data fallbacks\n    deal.market_name = deal.market_name || 'New York';\n    deal.region_name = deal.region_name || 'Northeast';\n    deal.brand_name = deal.brand_name || 'Independent';\n    deal.chain_scale_name = deal.chain_scale_name || 'Upscale';\n    // If market trends data is missing or empty, create placeholder data\n    if (!deal.market_trends || deal.market_trends.length === 0) {\n        deal.market_trends = generateMockMarketTrends();\n    }\n    // If market comparison data is missing or empty, create placeholder data\n    if (!deal.market_comparison || deal.market_comparison.length === 0) {\n        deal.market_comparison = generateMockMarketComparison();\n    }\n    return deal;\n};\n// Generate mock market trends data\nconst generateMockMarketTrends = ()=>{\n    const trends = [];\n    const currentYear = new Date().getFullYear();\n    for(let year = currentYear - 4; year <= currentYear; year++){\n        for(let month = 1; month <= 12; month++){\n            // Skip future months in current year\n            if (year === currentYear && month > new Date().getMonth() + 1) continue;\n            // Calculate some realistic values with seasonal variations\n            const seasonalFactor = 1 + Math.sin((month - 1) * Math.PI / 6) * 0.15; // Seasonal variation\n            const yearGrowth = 1 + (year - (currentYear - 4)) * 0.05; // Year-over-year growth\n            trends.push({\n                year,\n                month,\n                revpar: Math.round(100 * seasonalFactor * yearGrowth),\n                adr: Math.round(150 * seasonalFactor * yearGrowth),\n                occupancy: Math.min(0.95, Math.max(0.6, 0.75 * seasonalFactor * yearGrowth))\n            });\n        }\n    }\n    return trends;\n};\n// Generate mock market comparison data\nconst generateMockMarketComparison = ()=>{\n    return [\n        {\n            market_name: 'New York',\n            avg_revpar: 210.50,\n            avg_adr: 275.30,\n            avg_occupancy: 0.76\n        },\n        {\n            market_name: 'Boston',\n            avg_revpar: 185.25,\n            avg_adr: 245.80,\n            avg_occupancy: 0.75\n        },\n        {\n            market_name: 'Philadelphia',\n            avg_revpar: 145.80,\n            avg_adr: 195.40,\n            avg_occupancy: 0.74\n        }\n    ];\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_middleware_auth__WEBPACK_IMPORTED_MODULE_2__.withAuth)(handler));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/deals/[id].js\n");

/***/ }),

/***/ "(api-node)/./utils/activityLogger.js":
/*!*********************************!*\
  !*** ./utils/activityLogger.js ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEntityActivityLogs: () => (/* binding */ getEntityActivityLogs),\n/* harmony export */   saveActivityLog: () => (/* binding */ saveActivityLog)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Utility for logging user activities\n\n/**\r\n * Save an activity log entry\r\n * @param {Object} logData - The activity data to log\r\n * @param {string} logData.user_id - The ID of the user performing the action\r\n * @param {string} logData.action - The type of action (e.g., CREATE_DEAL, UPDATE_DEAL, etc.)\r\n * @param {string} logData.entity_type - The type of entity being acted upon (e.g., DEAL, PROPERTY, etc.)\r\n * @param {string} logData.entity_id - The ID of the entity being acted upon\r\n * @param {string} logData.details - Additional details about the action\r\n * @returns {Promise} - A promise that resolves to the API response\r\n */ const saveActivityLog = async (logData)=>{\n    try {\n        const { user_id, action, entity_type, entity_id, details } = logData;\n        // Basic validation\n        if (!user_id || !action || !entity_type || !entity_id) {\n            throw new Error('Missing required fields for activity log');\n        }\n        // Log to database\n        const response = await fetch('/api/activity-log', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user_id,\n                action,\n                entity_type,\n                entity_id,\n                details,\n                timestamp: new Date().toISOString()\n            })\n        });\n        return response.data;\n    } catch (error) {\n        // Just log the error but don't fail the main operation\n        console.error('Error logging activity:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\r\n * Get activity logs for a specific entity\r\n * @param {string} entityType - The type of entity (e.g., DEAL, PROPERTY)\r\n * @param {string} entityId - The ID of the entity\r\n * @returns {Promise} - A promise that resolves to the activity logs\r\n */ const getEntityActivityLogs = async (entityType, entityId)=>{\n    try {\n        const response = await fetch(`/api/activity-log?entity_type=${entityType}&entity_id=${entityId}`);\n        if (!response.ok) {\n            throw new Error('Failed to fetch activity logs');\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching activity logs:', error);\n        throw error;\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3V0aWxzL2FjdGl2aXR5TG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNDQUFzQztBQUNaO0FBRTFCOzs7Ozs7Ozs7Q0FTQyxHQUNNLE1BQU1DLGtCQUFrQixPQUFPQztJQUNwQyxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRSxHQUFHTDtRQUU3RCxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFVBQVUsQ0FBQ0MsZUFBZSxDQUFDQyxXQUFXO1lBQ3JELE1BQU0sSUFBSUUsTUFBTTtRQUNsQjtRQUVBLGtCQUFrQjtRQUNsQixNQUFNQyxXQUFXLE1BQU1DLE1BQU0scUJBQXFCO1lBQ2hEQyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFDbkJaO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztnQkFDQVMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1lBQ25DO1FBQ0Y7UUFFQSxPQUFPVCxTQUFTVSxJQUFJO0lBQ3RCLEVBQUUsT0FBT0MsT0FBTztRQUNkLHVEQUF1RDtRQUN2REMsUUFBUUQsS0FBSyxDQUFDLDJCQUEyQkE7UUFDekMsT0FBTztZQUFFRSxTQUFTO1lBQU9GLE9BQU9BLE1BQU1HLE9BQU87UUFBQztJQUNoRDtBQUNGLEVBQUU7QUFFRjs7Ozs7Q0FLQyxHQUNNLE1BQU1DLHdCQUF3QixPQUFPQyxZQUFZQztJQUN0RCxJQUFJO1FBQ0YsTUFBTWpCLFdBQVcsTUFBTUMsTUFBTSxDQUFDLDhCQUE4QixFQUFFZSxXQUFXLFdBQVcsRUFBRUMsVUFBVTtRQUNoRyxJQUFJLENBQUNqQixTQUFTa0IsRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSW5CLE1BQU07UUFDbEI7UUFDQSxPQUFPLE1BQU1DLFNBQVNtQixJQUFJO0lBQzVCLEVBQUUsT0FBT1IsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxNQUFNQTtJQUNSO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsiQzpcXHZpbm9kXFxwcm9qZWN0c1xcaW5udmVzdFxcUE9DXFxpbm52ZXN0YWlcXHV0aWxzXFxhY3Rpdml0eUxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVdGlsaXR5IGZvciBsb2dnaW5nIHVzZXIgYWN0aXZpdGllc1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuLyoqXHJcbiAqIFNhdmUgYW4gYWN0aXZpdHkgbG9nIGVudHJ5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBsb2dEYXRhIC0gVGhlIGFjdGl2aXR5IGRhdGEgdG8gbG9nXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2dEYXRhLnVzZXJfaWQgLSBUaGUgSUQgb2YgdGhlIHVzZXIgcGVyZm9ybWluZyB0aGUgYWN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2dEYXRhLmFjdGlvbiAtIFRoZSB0eXBlIG9mIGFjdGlvbiAoZS5nLiwgQ1JFQVRFX0RFQUwsIFVQREFURV9ERUFMLCBldGMuKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9nRGF0YS5lbnRpdHlfdHlwZSAtIFRoZSB0eXBlIG9mIGVudGl0eSBiZWluZyBhY3RlZCB1cG9uIChlLmcuLCBERUFMLCBQUk9QRVJUWSwgZXRjLilcclxuICogQHBhcmFtIHtzdHJpbmd9IGxvZ0RhdGEuZW50aXR5X2lkIC0gVGhlIElEIG9mIHRoZSBlbnRpdHkgYmVpbmcgYWN0ZWQgdXBvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9nRGF0YS5kZXRhaWxzIC0gQWRkaXRpb25hbCBkZXRhaWxzIGFib3V0IHRoZSBhY3Rpb25cclxuICogQHJldHVybnMge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIEFQSSByZXNwb25zZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNhdmVBY3Rpdml0eUxvZyA9IGFzeW5jIChsb2dEYXRhKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgdXNlcl9pZCwgYWN0aW9uLCBlbnRpdHlfdHlwZSwgZW50aXR5X2lkLCBkZXRhaWxzIH0gPSBsb2dEYXRhO1xyXG4gICAgXHJcbiAgICAvLyBCYXNpYyB2YWxpZGF0aW9uXHJcbiAgICBpZiAoIXVzZXJfaWQgfHwgIWFjdGlvbiB8fCAhZW50aXR5X3R5cGUgfHwgIWVudGl0eV9pZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgZmllbGRzIGZvciBhY3Rpdml0eSBsb2cnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gTG9nIHRvIGRhdGFiYXNlXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2FjdGl2aXR5LWxvZycsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICB1c2VyX2lkLFxyXG4gICAgICAgIGFjdGlvbixcclxuICAgICAgICBlbnRpdHlfdHlwZSxcclxuICAgICAgICBlbnRpdHlfaWQsXHJcbiAgICAgICAgZGV0YWlscyxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAvLyBKdXN0IGxvZyB0aGUgZXJyb3IgYnV0IGRvbid0IGZhaWwgdGhlIG1haW4gb3BlcmF0aW9uXHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2dnaW5nIGFjdGl2aXR5OicsIGVycm9yKTtcclxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYWN0aXZpdHkgbG9ncyBmb3IgYSBzcGVjaWZpYyBlbnRpdHlcclxuICogQHBhcmFtIHtzdHJpbmd9IGVudGl0eVR5cGUgLSBUaGUgdHlwZSBvZiBlbnRpdHkgKGUuZy4sIERFQUwsIFBST1BFUlRZKVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZW50aXR5SWQgLSBUaGUgSUQgb2YgdGhlIGVudGl0eVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgYWN0aXZpdHkgbG9nc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldEVudGl0eUFjdGl2aXR5TG9ncyA9IGFzeW5jIChlbnRpdHlUeXBlLCBlbnRpdHlJZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2FjdGl2aXR5LWxvZz9lbnRpdHlfdHlwZT0ke2VudGl0eVR5cGV9JmVudGl0eV9pZD0ke2VudGl0eUlkfWApO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBhY3Rpdml0eSBsb2dzJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhY3Rpdml0eSBsb2dzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufTtcclxuIl0sIm5hbWVzIjpbImF4aW9zIiwic2F2ZUFjdGl2aXR5TG9nIiwibG9nRGF0YSIsInVzZXJfaWQiLCJhY3Rpb24iLCJlbnRpdHlfdHlwZSIsImVudGl0eV9pZCIsImRldGFpbHMiLCJFcnJvciIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJkYXRhIiwiZXJyb3IiLCJjb25zb2xlIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJnZXRFbnRpdHlBY3Rpdml0eUxvZ3MiLCJlbnRpdHlUeXBlIiwiZW50aXR5SWQiLCJvayIsImpzb24iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./utils/activityLogger.js\n");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("uuid");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5C%5Bid%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();