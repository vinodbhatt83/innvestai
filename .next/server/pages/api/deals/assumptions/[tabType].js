"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/deals/assumptions/[tabType]";
exports.ids = ["pages/api/deals/assumptions/[tabType]"];
exports.modules = {

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Choose one export style based on the environment\n// Use ES modules export style since that's what the rest of your code uses\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQsbURBQW1EO0FBQ25ELDJFQUEyRTtBQUNwRCIsInNvdXJjZXMiOlsiQzpcXHZpbm9kXFxwcm9qZWN0c1xcaW5udmVzdFxcUE9DXFxpbm52ZXN0YWlcXGxpYlxcZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2RiLmpzXHJcblxyXG4vLyBJbml0aWFsaXplIHF1ZXJ5IGFuZCBwb29sIGFzIG51bGxcclxubGV0IHBvb2wgPSBudWxsO1xyXG5sZXQgcXVlcnkgPSBudWxsO1xyXG5cclxuLy8gT25seSBydW4gdGhpcyBjb2RlIG9uIHRoZSBzZXJ2ZXJcclxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFNlcnZlci1zaWRlIGNvZGUgLSBpbXBvcnQgcGcgdXNpbmcgcmVxdWlyZSB0byBhdm9pZCB3ZWJwYWNrIGlzc3Vlc1xyXG4gICAgY29uc3QgeyBQb29sIH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gcG9vbFxyXG4gICAgcG9vbCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgXHJcbiAgICAgID8gbmV3IFBvb2woe1xyXG4gICAgICAgICAgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxyXG4gICAgICAgICAgc3NsOiB7XHJcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICA6IG5ldyBQb29sKHtcclxuICAgICAgICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ3Bvc3RncmVzJyxcclxuICAgICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXHJcbiAgICAgICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnaW5udmVzdGFpJywgLy8gVXNlIGJ1aWx0LWluIHBvc3RncmVzIGRhdGFiYXNlXHJcbiAgICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJ1RlbXBAMTIzJyxcclxuICAgICAgICAgIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJzU0MzInKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBEZWZpbmUgdGhlIHF1ZXJ5IGZ1bmN0aW9uXHJcbiAgICBxdWVyeSA9IGFzeW5jICh0ZXh0LCBwYXJhbXMpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcG9vbC5xdWVyeSh0ZXh0LCBwYXJhbXMpO1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvZyBxdWVyeSBwZXJmb3JtYW5jZSBpbiBkZXZlbG9wbWVudFxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0ZWQgcXVlcnknLCB7IHRleHQsIGR1cmF0aW9uLCByb3dzOiByZXMucm93Q291bnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNldHVwIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgcG9vbFxyXG4gICAgcG9vbC5vbignZXJyb3InLCAoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YWJhc2UgZXJyb3I6JywgZXJyKTtcclxuICAgICAgLy8gRG9uJ3QgY3Jhc2ggdGhlIHNlcnZlciBvbiBjb25uZWN0aW9uIGVycm9yc1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIG1vZHVsZSBpbml0aWFsaXplZCBvbiBzZXJ2ZXInKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgZGF0YWJhc2UgbW9kdWxlOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIG5vbi1mdW5jdGlvbmFsIHN0dWJzIGlmIGluaXRpYWxpemF0aW9uIGZhaWxzXHJcbiAgICBwb29sID0ge1xyXG4gICAgICBxdWVyeTogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHBvb2wgbm90IGluaXRpYWxpemVkJyk7IH0sXHJcbiAgICAgIG9uOiAoKSA9PiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICBxdWVyeSA9IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyeSBmdW5jdGlvbiBub3QgaW5pdGlhbGl6ZWQnKTsgfTtcclxuICB9XHJcbn0gZWxzZSB7XHJcbiAgLy8gQ2xpZW50LXNpZGUgbW9jayBpbXBsZW1lbnRhdGlvblxyXG4gIHF1ZXJ5ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyaWVzIGNhbm5vdCBiZSBleGVjdXRlZCBvbiB0aGUgY2xpZW50IHNpZGUnKTtcclxuICB9O1xyXG4gIFxyXG4gIHBvb2wgPSB7XHJcbiAgICBxdWVyeTogKCkgPT4ge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gICAgfSxcclxuICAgIG9uOiAoKSA9PiB7fVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIENob29zZSBvbmUgZXhwb3J0IHN0eWxlIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudFxyXG4vLyBVc2UgRVMgbW9kdWxlcyBleHBvcnQgc3R5bGUgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHJlc3Qgb2YgeW91ciBjb2RlIHVzZXNcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2Fassumptions%2F%5BtabType%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cassumptions%5C%5BtabType%5D.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2Fassumptions%2F%5BtabType%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cassumptions%5C%5BtabType%5D.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_deals_assumptions_tabType_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\deals\\assumptions\\[tabType].js */ \"(api-node)/./pages/api/deals/assumptions/[tabType].js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_assumptions_tabType_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_deals_assumptions_tabType_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/deals/assumptions/[tabType]\",\n        pathname: \"/api/deals/assumptions/[tabType]\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_deals_assumptions_tabType_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZGVhbHMlMkZhc3N1bXB0aW9ucyUyRiU1QnRhYlR5cGUlNUQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2RlYWxzJTVDYXNzdW1wdGlvbnMlNUMlNUJ0YWJUeXBlJTVELmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQzJFO0FBQzNFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxvRUFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsb0VBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZGVhbHNcXFxcYXNzdW1wdGlvbnNcXFxcW3RhYlR5cGVdLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZWFscy9hc3N1bXB0aW9ucy9bdGFiVHlwZV1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZWFscy9hc3N1bXB0aW9ucy9bdGFiVHlwZV1cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2Fassumptions%2F%5BtabType%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cassumptions%5C%5BtabType%5D.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/deals/assumptions/[tabType].js":
/*!**************************************************!*\
  !*** ./pages/api/deals/assumptions/[tabType].js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../lib/db */ \"(api-node)/./lib/db.js\");\n// API route for saving deal assumptions by tab type\n\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    const { tabType } = req.query;\n    const { deal_id, ...tabData } = req.body;\n    if (!deal_id) {\n        return res.status(400).json({\n            error: 'Deal ID is required'\n        });\n    }\n    // Logging for debugging\n    console.log(`Saving ${tabType} data for deal ${deal_id}:`, tabData);\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.pool.connect();\n    try {\n        // Start a transaction\n        await client.query('BEGIN');\n        // First, check if the deal exists\n        const dealCheck = await client.query('SELECT deal_id FROM deals WHERE deal_id = $1', [\n            deal_id\n        ]);\n        if (dealCheck.rows.length === 0) {\n            await client.query('ROLLBACK');\n            return res.status(404).json({\n                error: 'Deal not found'\n            });\n        }\n        // Get or create a fact record for this deal\n        let factRecord = await client.query('SELECT * FROM fact_deal_assumptions WHERE deal_id = $1', [\n            deal_id\n        ]);\n        let factId;\n        if (factRecord.rows.length === 0) {\n            // Create a new fact record\n            const newFactResult = await client.query('INSERT INTO fact_deal_assumptions (deal_id) VALUES ($1) RETURNING fact_id', [\n                deal_id\n            ]);\n            factId = newFactResult.rows[0].fact_id;\n        } else {\n            factId = factRecord.rows[0].fact_id;\n        }\n        // Process based on tab type\n        let updatedFieldValue = null;\n        switch(tabType){\n            case 'property':\n                updatedFieldValue = await handleProperty(client, deal_id, factId, tabData);\n                break;\n            case 'acquisition':\n                updatedFieldValue = await handleAcquisition(client, deal_id, factId, tabData);\n                break;\n            case 'financing':\n                updatedFieldValue = await handleFinancing(client, deal_id, factId, tabData);\n                break;\n            case 'disposition':\n                updatedFieldValue = await handleDisposition(client, deal_id, factId, tabData);\n                break;\n            case 'capital-expense':\n                updatedFieldValue = await handleCapitalExpense(client, deal_id, factId, tabData);\n                break;\n            case 'inflation':\n                updatedFieldValue = await handleInflation(client, deal_id, factId, tabData);\n                break;\n            case 'penetration':\n                updatedFieldValue = await handlePenetration(client, deal_id, factId, tabData);\n                break;\n            case 'revenue':\n                updatedFieldValue = await handleRevenue(client, deal_id, factId, tabData);\n                break;\n            case 'dept-expense':\n                updatedFieldValue = await handleDeptExpense(client, deal_id, factId, tabData);\n                break;\n            case 'mgmt-fee':\n                updatedFieldValue = await handleManagementFee(client, deal_id, factId, tabData);\n                break;\n            case 'undist1':\n                updatedFieldValue = await handleUndist1(client, deal_id, factId, tabData);\n                break;\n            case 'undist2':\n                updatedFieldValue = await handleUndist2(client, deal_id, factId, tabData);\n                break;\n            case 'nonop-expense':\n                updatedFieldValue = await handleNonOpExpense(client, deal_id, factId, tabData);\n                break;\n            case 'ffe':\n                updatedFieldValue = await handleFFE(client, deal_id, factId, tabData);\n                break;\n            default:\n                await client.query('ROLLBACK');\n                return res.status(400).json({\n                    error: `Unknown tab type: ${tabType}`\n                });\n        }\n        // Commit the transaction\n        await client.query('COMMIT');\n        return res.status(200).json({\n            success: true,\n            message: `${tabType} data saved successfully`,\n            updatedField: updatedFieldValue\n        });\n    } catch (error) {\n        await client.query('ROLLBACK');\n        console.error(`Error saving ${tabType} data:`, error);\n        // Provide more detailed error information\n        let status = 500;\n        let errorMessage = error.message;\n        // Check for specific error types to provide better error messages\n        if (error.message.includes('not found') || error.message.includes('does not exist')) {\n            status = 404;\n        } else if (error.message.includes('violates') || error.message.includes('constraint')) {\n            status = 400;\n            errorMessage = `Database constraint violation: ${error.message}`;\n        } else if (error.message.includes('permission') || error.message.includes('denied')) {\n            status = 403;\n            errorMessage = `Permission denied: ${error.message}`;\n        }\n        return res.status(status).json({\n            error: `Failed to save ${tabType} data`,\n            message: errorMessage,\n            details: error.toString()\n        });\n    } finally{\n        client.release();\n    }\n}\n// Helper functions for each tab type\nasync function handleProperty(client, dealId, factId, data) {\n    try {\n        // For property tab, we directly update the deals table\n        console.log('Updating deal properties:', data);\n        console.log('Deal ID for property update:', dealId);\n        // Make sure the deal exists first\n        const dealCheck = await client.query('SELECT * FROM deals WHERE deal_id = $1', [\n            dealId\n        ]);\n        console.log('Deal check result:', dealCheck.rowCount > 0 ? 'Deal found' : 'Deal not found');\n        // If deal doesn't exist, throw an error\n        if (dealCheck.rowCount === 0) {\n            throw new Error(`Deal with ID ${dealId} not found`);\n        }\n        // Check if the deals table has all the columns we're trying to update\n        const tableInfo = await client.query(`\n      SELECT column_name\n      FROM information_schema.columns \n      WHERE table_name = 'deals'\n    `);\n        const tableColumns = tableInfo.rows.map((row)=>row.column_name);\n        console.log('Available columns in deals table:', tableColumns);\n        // Create a dynamic query based on the available columns\n        let updateFields = [];\n        let values = [];\n        let paramIndex = 1;\n        // Only include fields that exist in the table\n        const fields = [\n            {\n                name: 'deal_name',\n                value: data.deal_name || null\n            },\n            {\n                name: 'property_name',\n                value: data.property_name || null\n            },\n            {\n                name: 'property_address',\n                value: data.property_address || null\n            },\n            {\n                name: 'city',\n                value: data.city || null\n            },\n            {\n                name: 'state',\n                value: data.state || null\n            },\n            {\n                name: 'property_type',\n                value: data.property_type || null\n            },\n            {\n                name: 'number_of_rooms',\n                value: data.number_of_rooms || null\n            },\n            {\n                name: 'status',\n                value: data.status || 'Active'\n            }\n        ];\n        // Add fields that exist in the table\n        for (const field of fields){\n            if (tableColumns.includes(field.name)) {\n                updateFields.push(`${field.name} = $${paramIndex}`);\n                values.push(field.value);\n                paramIndex++;\n            }\n        }\n        // Add updated_at if it exists\n        if (tableColumns.includes('updated_at')) {\n            updateFields.push('updated_at = NOW()');\n        }\n        // Construct the query\n        const query = `\n      UPDATE deals \n      SET ${updateFields.join(', ')}\n      WHERE deal_id = $${paramIndex}\n      RETURNING deal_id\n    `;\n        // Add the deal_id as the last parameter\n        values.push(dealId);\n        console.log('Executing query:', query);\n        console.log('With values:', values);\n        const result = await client.query(query, values);\n        console.log('Update result:', result.rowCount > 0 ? 'Update successful' : 'No rows updated');\n        return dealId;\n    } catch (error) {\n        console.error('Error in handleProperty:', error);\n        throw error;\n    }\n}\nasync function handleAcquisition(client, dealId, factId, data) {\n    try {\n        // Check if record exists\n        const existingRecord = await client.query(`SELECT acquisition_id FROM dim_acquisition WHERE deal_id = $1`, [\n            dealId\n        ]);\n        if (existingRecord.rows.length > 0) {\n            // Update existing record\n            const acquisitionId = existingRecord.rows[0].acquisition_id;\n            await client.query(`UPDATE dim_acquisition \n         SET acquisition_month = $1, acquisition_year = $2, acquisition_costs = $3,\n             cap_rate_going_in = $4, hold_period = $5, purchase_price = $6, \n             purchase_price_method = $7, updated_at = NOW()\n         WHERE acquisition_id = $8`, [\n                data.acquisition_month || null,\n                data.acquisition_year || null,\n                data.acquisition_costs || null,\n                data.cap_rate_going_in || null,\n                data.hold_period || null,\n                data.purchase_price || null,\n                data.purchase_price_method || null,\n                acquisitionId\n            ]);\n            return acquisitionId;\n        } else {\n            // Insert new record\n            const result = await client.query(`INSERT INTO dim_acquisition \n         (deal_id, acquisition_month, acquisition_year, acquisition_costs, \n          cap_rate_going_in, hold_period, purchase_price, purchase_price_method)\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n         RETURNING acquisition_id`, [\n                dealId,\n                data.acquisition_month || null,\n                data.acquisition_year || null,\n                data.acquisition_costs || null,\n                data.cap_rate_going_in || null,\n                data.hold_period || null,\n                data.purchase_price || null,\n                data.purchase_price_method || null\n            ]);\n            const acquisitionId = result.rows[0].acquisition_id;\n            // Update the fact table to link to this acquisition record\n            await client.query(`UPDATE fact_deal_assumptions SET acquisition_id = $1 WHERE fact_id = $2`, [\n                acquisitionId,\n                factId\n            ]);\n            return acquisitionId;\n        }\n    } catch (error) {\n        console.error('Error in handleAcquisition:', error);\n        throw error;\n    }\n}\n// Implement similar handler functions for other tabs\n// For brevity, I'm including simplified versions below.\n// In a production app, you would implement full versions for each tab type.\nasync function handleFinancing(client, dealId, factId, data) {\n    // Similar implementation to handleAcquisition\n    // Field names would be specific to financing\n    console.log('Handling financing data:', data);\n    return null; // Return the ID of the record\n}\nasync function handleDisposition(client, dealId, factId, data) {\n    // Similar implementation\n    console.log('Handling disposition data:', data);\n    return null;\n}\nasync function handleCapitalExpense(client, dealId, factId, data) {\n    console.log('Handling capital expense data:', data);\n    return null;\n}\nasync function handleInflation(client, dealId, factId, data) {\n    console.log('Handling inflation data:', data);\n    return null;\n}\nasync function handlePenetration(client, dealId, factId, data) {\n    console.log('Handling penetration data:', data);\n    return null;\n}\nasync function handleRevenue(client, dealId, factId, data) {\n    console.log('Handling revenue data:', data);\n    return null;\n}\nasync function handleDeptExpense(client, dealId, factId, data) {\n    console.log('Handling departmental expense data:', data);\n    return null;\n}\nasync function handleManagementFee(client, dealId, factId, data) {\n    console.log('Handling management fee data:', data);\n    return null;\n}\nasync function handleUndist1(client, dealId, factId, data) {\n    console.log('Handling undistributed expenses 1 data:', data);\n    return null;\n}\nasync function handleUndist2(client, dealId, factId, data) {\n    console.log('Handling undistributed expenses 2 data:', data);\n    return null;\n}\nasync function handleNonOpExpense(client, dealId, factId, data) {\n    console.log('Handling non-operating expense data:', data);\n    return null;\n}\nasync function handleFFE(client, dealId, factId, data) {\n    console.log('Handling FF&E reserve data:', data);\n    return null;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (handler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/deals/assumptions/[tabType].js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdeals%2Fassumptions%2F%5BtabType%5D&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cdeals%5Cassumptions%5C%5BtabType%5D.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();