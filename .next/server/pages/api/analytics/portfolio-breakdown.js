"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analytics/portfolio-breakdown";
exports.ids = ["pages/api/analytics/portfolio-breakdown"];
exports.modules = {

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fportfolio-breakdown&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cportfolio-breakdown.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fportfolio-breakdown&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cportfolio-breakdown.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analytics_portfolio_breakdown_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\analytics\\portfolio-breakdown.js */ \"(api-node)/./pages/api/analytics/portfolio-breakdown.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_portfolio_breakdown_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_portfolio_breakdown_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analytics/portfolio-breakdown\",\n        pathname: \"/api/analytics/portfolio-breakdown\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_analytics_portfolio_breakdown_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYW5hbHl0aWNzJTJGcG9ydGZvbGlvLWJyZWFrZG93biZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDYW5hbHl0aWNzJTVDcG9ydGZvbGlvLWJyZWFrZG93bi5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUM0RTtBQUM1RTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsd0VBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHdFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGFuYWx5dGljc1xcXFxwb3J0Zm9saW8tYnJlYWtkb3duLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXRpY3MvcG9ydGZvbGlvLWJyZWFrZG93blwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FuYWx5dGljcy9wb3J0Zm9saW8tYnJlYWtkb3duXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fportfolio-breakdown&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cportfolio-breakdown.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/analytics/portfolio-breakdown.js":
/*!****************************************************!*\
  !*** ./pages/api/analytics/portfolio-breakdown.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n// pages/api/analytics/portfolio-breakdown.js\n\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        res.setHeader('Allow', [\n            'GET'\n        ]);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n    try {\n        const { view = 'market' } = req.query;\n        // Check which tables exist in the database\n        const tablesQuery = `\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public'\n    `;\n        const tableResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tablesQuery);\n        const tables = tableResult.rows.map((row)=>row.table_name);\n        let breakdownData = [];\n        let totalValue = 0;\n        // If deals table exists, we'll use it as our data source\n        if (tables.includes('deals')) {\n            // Check deals table columns\n            const dealsColumnsQuery = `\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_schema = 'public' \n        AND table_name = 'deals'\n      `;\n            const dealsColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(dealsColumnsQuery);\n            const dealColumns = dealsColumnsResult.rows.map((row)=>row.column_name);\n            // Get total investment amount\n            const totalQuery = `\n        SELECT SUM(investment_amount) AS total_investment\n        FROM deals\n      `;\n            const totalResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(totalQuery);\n            totalValue = parseFloat(totalResult.rows[0]?.total_investment || 0);\n            // If deals have property_id and we need market or region breakdown\n            const hasPropertyId = dealColumns.includes('property_id');\n            if (hasPropertyId && tables.includes('dim_property')) {\n                // Check property table columns\n                const propColumnsQuery = `\n          SELECT column_name \n          FROM information_schema.columns \n          WHERE table_schema = 'public' \n          AND table_name = 'dim_property'\n        `;\n                const propColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(propColumnsQuery);\n                const propColumns = propColumnsResult.rows.map((row)=>row.column_name);\n                // Get property ID column name\n                const propIdColumn = propColumns.find((col)=>col === 'property_key' || col === 'id' || col === 'property_id') || 'property_key';\n                // Handle different view types\n                switch(view){\n                    case 'market':\n                        if (tables.includes('dim_market')) {\n                            // Check market table columns\n                            const marketColumnsQuery = `\n                SELECT column_name \n                FROM information_schema.columns \n                WHERE table_schema = 'public' \n                AND table_name = 'dim_market'\n              `;\n                            const marketColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(marketColumnsQuery);\n                            const marketColumns = marketColumnsResult.rows.map((row)=>row.column_name);\n                            // Check if market_key exists in property table\n                            const hasMarketKey = propColumns.includes('market_key');\n                            if (hasMarketKey) {\n                                // Get market name column\n                                const marketNameColumn = marketColumns.find((col)=>col.includes('name') || col === 'market_name') || 'market_name';\n                                // Get market key column\n                                const marketIdColumn = marketColumns.find((col)=>col === 'market_key' || col === 'id') || 'market_key';\n                                const breakdownQuery = `\n                  SELECT m.${marketNameColumn} AS name, \n                         SUM(d.investment_amount) AS value\n                  FROM deals d\n                  JOIN dim_property p ON d.property_id = p.${propIdColumn}\n                  JOIN dim_market m ON p.market_key = m.${marketIdColumn}\n                  GROUP BY m.${marketNameColumn}\n                  ORDER BY value DESC\n                `;\n                                try {\n                                    const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(breakdownQuery);\n                                    breakdownData = result.rows;\n                                } catch (err) {\n                                    console.error('Error executing market breakdown query:', err);\n                                // Will fall back to sample data\n                                }\n                            }\n                        }\n                        break;\n                    case 'region':\n                        if (tables.includes('dim_region')) {\n                            // Check if property table has region_key directly\n                            const hasRegionKey = propColumns.includes('region_key');\n                            if (hasRegionKey) {\n                                // Get region columns\n                                const regionColumnsQuery = `\n                  SELECT column_name \n                  FROM information_schema.columns \n                  WHERE table_schema = 'public' \n                  AND table_name = 'dim_region'\n                `;\n                                const regionColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(regionColumnsQuery);\n                                const regionColumns = regionColumnsResult.rows.map((row)=>row.column_name);\n                                // Get region name column\n                                const regionNameColumn = regionColumns.find((col)=>col.includes('name') || col === 'region_name') || 'region_name';\n                                // Get region key column\n                                const regionIdColumn = regionColumns.find((col)=>col === 'region_key' || col === 'id') || 'region_key';\n                                const breakdownQuery = `\n                  SELECT r.${regionNameColumn} AS name, \n                         SUM(d.investment_amount) AS value\n                  FROM deals d\n                  JOIN dim_property p ON d.property_id = p.${propIdColumn}\n                  JOIN dim_region r ON p.region_key = r.${regionIdColumn}\n                  GROUP BY r.${regionNameColumn}\n                  ORDER BY value DESC\n                `;\n                                try {\n                                    const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(breakdownQuery);\n                                    breakdownData = result.rows;\n                                } catch (err) {\n                                    console.error('Error executing region breakdown query:', err);\n                                // Will fall back to sample data\n                                }\n                            } else if (tables.includes('dim_market')) {\n                                // Check if we need to go through market to get to region\n                                const marketColumnsQuery = `\n                  SELECT column_name \n                  FROM information_schema.columns \n                  WHERE table_schema = 'public' \n                  AND table_name = 'dim_market'\n                `;\n                                const marketColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(marketColumnsQuery);\n                                const marketColumns = marketColumnsResult.rows.map((row)=>row.column_name);\n                                const hasMarketRegionKey = marketColumns.includes('region_key');\n                                if (hasMarketRegionKey && propColumns.includes('market_key')) {\n                                    // Get region columns\n                                    const regionColumnsQuery = `\n                    SELECT column_name \n                    FROM information_schema.columns \n                    WHERE table_schema = 'public' \n                    AND table_name = 'dim_region'\n                  `;\n                                    const regionColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(regionColumnsQuery);\n                                    const regionColumns = regionColumnsResult.rows.map((row)=>row.column_name);\n                                    // Get region name column\n                                    const regionNameColumn = regionColumns.find((col)=>col.includes('name') || col === 'region_name') || 'region_name';\n                                    // Use the correct join path\n                                    const breakdownQuery = `\n                    SELECT r.${regionNameColumn} AS name, \n                           SUM(d.investment_amount) AS value\n                    FROM deals d\n                    JOIN dim_property p ON d.property_id = p.${propIdColumn}\n                    JOIN dim_market m ON p.market_key = m.market_key\n                    JOIN dim_region r ON m.region_key = r.region_key\n                    GROUP BY r.${regionNameColumn}\n                    ORDER BY value DESC\n                  `;\n                                    try {\n                                        const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(breakdownQuery);\n                                        breakdownData = result.rows;\n                                    } catch (err) {\n                                        console.error('Error executing region breakdown query through market:', err);\n                                    // Will fall back to sample data\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case 'brand':\n                        if (tables.includes('dim_brand')) {\n                            // Check if property table has brand_key\n                            const hasBrandKey = propColumns.includes('brand_key');\n                            if (hasBrandKey) {\n                                // Get brand columns\n                                const brandColumnsQuery = `\n                  SELECT column_name \n                  FROM information_schema.columns \n                  WHERE table_schema = 'public' \n                  AND table_name = 'dim_brand'\n                `;\n                                const brandColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(brandColumnsQuery);\n                                const brandColumns = brandColumnsResult.rows.map((row)=>row.column_name);\n                                // Get brand name column\n                                const brandNameColumn = brandColumns.find((col)=>col.includes('name') || col === 'brand_name') || 'brand_name';\n                                const breakdownQuery = `\n                  SELECT b.${brandNameColumn} AS name, \n                         SUM(d.investment_amount) AS value\n                  FROM deals d\n                  JOIN dim_property p ON d.property_id = p.${propIdColumn}\n                  JOIN dim_brand b ON p.brand_key = b.brand_key\n                  GROUP BY b.${brandNameColumn}\n                  ORDER BY value DESC\n                `;\n                                try {\n                                    const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(breakdownQuery);\n                                    breakdownData = result.rows;\n                                } catch (err) {\n                                    console.error('Error executing brand breakdown query:', err);\n                                // Will fall back to sample data\n                                }\n                            }\n                        }\n                        break;\n                    case 'type':\n                        if (tables.includes('dim_hotel_type')) {\n                            // Check if property table has hotel_type_key\n                            const hasTypeKey = propColumns.includes('hotel_type_key');\n                            if (hasTypeKey) {\n                                // Get hotel_type columns\n                                const typeColumnsQuery = `\n                  SELECT column_name \n                  FROM information_schema.columns \n                  WHERE table_schema = 'public' \n                  AND table_name = 'dim_hotel_type'\n                `;\n                                const typeColumnsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(typeColumnsQuery);\n                                const typeColumns = typeColumnsResult.rows.map((row)=>row.column_name);\n                                // Get type name column\n                                const typeNameColumn = typeColumns.find((col)=>col.includes('name') || col === 'hotel_type_name' || col === 'type_name') || 'hotel_type_name';\n                                const breakdownQuery = `\n                  SELECT ht.${typeNameColumn} AS name, \n                         SUM(d.investment_amount) AS value\n                  FROM deals d\n                  JOIN dim_property p ON d.property_id = p.${propIdColumn}\n                  JOIN dim_hotel_type ht ON p.hotel_type_key = ht.hotel_type_key\n                  GROUP BY ht.${typeNameColumn}\n                  ORDER BY value DESC\n                `;\n                                try {\n                                    const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(breakdownQuery);\n                                    breakdownData = result.rows;\n                                } catch (err) {\n                                    console.error('Error executing hotel type breakdown query:', err);\n                                // Will fall back to sample data\n                                }\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n        // If we couldn't get real data, return sample data\n        if (breakdownData.length === 0) {\n            switch(view){\n                case 'market':\n                    breakdownData = [\n                        {\n                            name: 'New York',\n                            value: 23800000\n                        },\n                        {\n                            name: 'Miami',\n                            value: 18700000\n                        },\n                        {\n                            name: 'Chicago',\n                            value: 15300000\n                        },\n                        {\n                            name: 'Las Vegas',\n                            value: 11900000\n                        },\n                        {\n                            name: 'Other Markets',\n                            value: 15300000\n                        }\n                    ];\n                    break;\n                case 'region':\n                    breakdownData = [\n                        {\n                            name: 'Northeast',\n                            value: 27200000\n                        },\n                        {\n                            name: 'Southeast',\n                            value: 22100000\n                        },\n                        {\n                            name: 'West',\n                            value: 18700000\n                        },\n                        {\n                            name: 'Midwest',\n                            value: 11900000\n                        },\n                        {\n                            name: 'Southwest',\n                            value: 5100000\n                        }\n                    ];\n                    break;\n                case 'brand':\n                    breakdownData = [\n                        {\n                            name: 'Marriott',\n                            value: 29750000\n                        },\n                        {\n                            name: 'Hilton',\n                            value: 23800000\n                        },\n                        {\n                            name: 'Hyatt',\n                            value: 12750000\n                        },\n                        {\n                            name: 'Independent',\n                            value: 10200000\n                        },\n                        {\n                            name: 'Other Brands',\n                            value: 8500000\n                        }\n                    ];\n                    break;\n                case 'type':\n                    breakdownData = [\n                        {\n                            name: 'Luxury',\n                            value: 35700000\n                        },\n                        {\n                            name: 'Upscale',\n                            value: 26350000\n                        },\n                        {\n                            name: 'Midscale',\n                            value: 15300000\n                        },\n                        {\n                            name: 'Economy',\n                            value: 7650000\n                        }\n                    ];\n                    break;\n            }\n            totalValue = breakdownData.reduce((sum, item)=>sum + item.value, 0);\n        }\n        // Calculate percentages\n        const formattedData = breakdownData.map((item)=>({\n                name: item.name,\n                value: parseFloat(item.value),\n                percentage: totalValue > 0 ? Math.round(item.value / totalValue * 100) : 0\n            }));\n        res.status(200).json(formattedData);\n    } catch (error) {\n        console.error('Error fetching portfolio breakdown:', error);\n        // Return fallback data on error\n        const fallbackData = [\n            {\n                name: 'New York',\n                value: 23800000,\n                percentage: 28\n            },\n            {\n                name: 'Miami',\n                value: 18700000,\n                percentage: 22\n            },\n            {\n                name: 'Chicago',\n                value: 15300000,\n                percentage: 18\n            },\n            {\n                name: 'Las Vegas',\n                value: 11900000,\n                percentage: 14\n            },\n            {\n                name: 'Other Markets',\n                value: 15300000,\n                percentage: 18\n            }\n        ];\n        res.status(200).json(fallbackData);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/analytics/portfolio-breakdown.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Fportfolio-breakdown&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cportfolio-breakdown.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();