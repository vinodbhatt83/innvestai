"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analytics/insights";
exports.ids = ["pages/api/analytics/insights"];
exports.modules = {

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Choose one export style based on the environment\n// Use ES modules export style since that's what the rest of your code uses\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQsbURBQW1EO0FBQ25ELDJFQUEyRTtBQUNwRCIsInNvdXJjZXMiOlsiQzpcXHZpbm9kXFxwcm9qZWN0c1xcaW5udmVzdFxcUE9DXFxpbm52ZXN0YWlcXGxpYlxcZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2RiLmpzXHJcblxyXG4vLyBJbml0aWFsaXplIHF1ZXJ5IGFuZCBwb29sIGFzIG51bGxcclxubGV0IHBvb2wgPSBudWxsO1xyXG5sZXQgcXVlcnkgPSBudWxsO1xyXG5cclxuLy8gT25seSBydW4gdGhpcyBjb2RlIG9uIHRoZSBzZXJ2ZXJcclxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFNlcnZlci1zaWRlIGNvZGUgLSBpbXBvcnQgcGcgdXNpbmcgcmVxdWlyZSB0byBhdm9pZCB3ZWJwYWNrIGlzc3Vlc1xyXG4gICAgY29uc3QgeyBQb29sIH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gcG9vbFxyXG4gICAgcG9vbCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgXHJcbiAgICAgID8gbmV3IFBvb2woe1xyXG4gICAgICAgICAgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxyXG4gICAgICAgICAgc3NsOiB7XHJcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICA6IG5ldyBQb29sKHtcclxuICAgICAgICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ3Bvc3RncmVzJyxcclxuICAgICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXHJcbiAgICAgICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnaW5udmVzdGFpJywgLy8gVXNlIGJ1aWx0LWluIHBvc3RncmVzIGRhdGFiYXNlXHJcbiAgICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJ1RlbXBAMTIzJyxcclxuICAgICAgICAgIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJzU0MzInKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBEZWZpbmUgdGhlIHF1ZXJ5IGZ1bmN0aW9uXHJcbiAgICBxdWVyeSA9IGFzeW5jICh0ZXh0LCBwYXJhbXMpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcG9vbC5xdWVyeSh0ZXh0LCBwYXJhbXMpO1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvZyBxdWVyeSBwZXJmb3JtYW5jZSBpbiBkZXZlbG9wbWVudFxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0ZWQgcXVlcnknLCB7IHRleHQsIGR1cmF0aW9uLCByb3dzOiByZXMucm93Q291bnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNldHVwIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgcG9vbFxyXG4gICAgcG9vbC5vbignZXJyb3InLCAoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YWJhc2UgZXJyb3I6JywgZXJyKTtcclxuICAgICAgLy8gRG9uJ3QgY3Jhc2ggdGhlIHNlcnZlciBvbiBjb25uZWN0aW9uIGVycm9yc1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIG1vZHVsZSBpbml0aWFsaXplZCBvbiBzZXJ2ZXInKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgZGF0YWJhc2UgbW9kdWxlOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIG5vbi1mdW5jdGlvbmFsIHN0dWJzIGlmIGluaXRpYWxpemF0aW9uIGZhaWxzXHJcbiAgICBwb29sID0ge1xyXG4gICAgICBxdWVyeTogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHBvb2wgbm90IGluaXRpYWxpemVkJyk7IH0sXHJcbiAgICAgIG9uOiAoKSA9PiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICBxdWVyeSA9IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyeSBmdW5jdGlvbiBub3QgaW5pdGlhbGl6ZWQnKTsgfTtcclxuICB9XHJcbn0gZWxzZSB7XHJcbiAgLy8gQ2xpZW50LXNpZGUgbW9jayBpbXBsZW1lbnRhdGlvblxyXG4gIHF1ZXJ5ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyaWVzIGNhbm5vdCBiZSBleGVjdXRlZCBvbiB0aGUgY2xpZW50IHNpZGUnKTtcclxuICB9O1xyXG4gIFxyXG4gIHBvb2wgPSB7XHJcbiAgICBxdWVyeTogKCkgPT4ge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gICAgfSxcclxuICAgIG9uOiAoKSA9PiB7fVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIENob29zZSBvbmUgZXhwb3J0IHN0eWxlIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudFxyXG4vLyBVc2UgRVMgbW9kdWxlcyBleHBvcnQgc3R5bGUgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHJlc3Qgb2YgeW91ciBjb2RlIHVzZXNcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Finsights&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cinsights.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Finsights&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cinsights.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analytics_insights_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\analytics\\insights.js */ \"(api-node)/./pages/api/analytics/insights.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_insights_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_analytics_insights_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analytics/insights\",\n        pathname: \"/api/analytics/insights\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_analytics_insights_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYW5hbHl0aWNzJTJGaW5zaWdodHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2FuYWx5dGljcyU1Q2luc2lnaHRzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQ2lFO0FBQ2pFO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyw2REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsNkRBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcYW5hbHl0aWNzXFxcXGluc2lnaHRzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXRpY3MvaW5zaWdodHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXRpY3MvaW5zaWdodHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Finsights&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cinsights.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/analytics/insights.js":
/*!*****************************************!*\
  !*** ./pages/api/analytics/insights.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/db */ \"(api-node)/./lib/db.js\");\n// pages/api/analytics/insights.js\n\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        res.setHeader('Allow', [\n            'GET'\n        ]);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n    try {\n        // Optional limit parameter with default of 5 insights\n        const { limit = 5 } = req.query;\n        const maxInsights = parseInt(limit);\n        // First, check what tables are available in the database\n        const tablesQuery = `\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public'\n    `;\n        const tablesResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(tablesQuery);\n        const tables = tablesResult.rows.map((row)=>row.table_name);\n        // Try to check what stored procedures are available\n        let availableFunctions = [];\n        try {\n            const functionsQuery = `\n        SELECT routine_name\n        FROM information_schema.routines\n        WHERE routine_type = 'FUNCTION' \n        AND routine_schema = 'public'\n      `;\n            const functionsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(functionsQuery);\n            availableFunctions = functionsResult.rows.map((row)=>row.routine_name);\n        } catch (err) {\n            console.error('Error checking available functions:', err);\n        }\n        // Collect insights from multiple sources\n        const insights = [];\n        let insightId = 1;\n        // Try to use functions if they exist\n        for (const functionName of availableFunctions){\n            // Stop adding insights if we've reached the maximum\n            if (insights.length >= maxInsights) break;\n            if ([\n                'analyze_market_dynamics',\n                'find_market_investment_opportunities',\n                'analyze_seasonal_patterns'\n            ].includes(functionName)) {\n                try {\n                    // Call the function with default parameters\n                    const functionQuery = `SELECT * FROM ${functionName}(2023, 2022)`;\n                    const functionResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(functionQuery);\n                    if (functionResult.rows && functionResult.rows.length > 0) {\n                        // Process results based on function name\n                        if (functionName === 'analyze_market_dynamics') {\n                            for (const row of functionResult.rows){\n                                if (insights.length >= maxInsights) break;\n                                if (row.market_name && row.revpar_growth) {\n                                    if (parseFloat(row.revpar_growth) > 5) {\n                                        insights.push({\n                                            id: insightId++,\n                                            type: 'opportunity',\n                                            title: `${row.market_name} RevPAR growth`,\n                                            description: `${row.market_name} shows strong RevPAR growth of ${parseFloat(row.revpar_growth).toFixed(1)}%, indicating a potential investment opportunity.`,\n                                            confidence: parseFloat(row.confidence || 0.85)\n                                        });\n                                    } else if (parseFloat(row.revpar_growth) < 0) {\n                                        insights.push({\n                                            id: insightId++,\n                                            type: 'risk',\n                                            title: `${row.market_name} RevPAR decline`,\n                                            description: `${row.market_name} shows a RevPAR decline of ${parseFloat(row.revpar_growth).toFixed(1)}%, suggesting caution for investments in this market.`,\n                                            confidence: parseFloat(row.confidence || 0.82)\n                                        });\n                                    }\n                                }\n                            }\n                        } else if (functionName === 'find_market_investment_opportunities') {\n                            for (const row of functionResult.rows){\n                                if (insights.length >= maxInsights) break;\n                                insights.push({\n                                    id: insightId++,\n                                    type: 'opportunity',\n                                    title: `${row.market_name} investment opportunity`,\n                                    description: `${row.market_name} shows promising investment potential with estimated returns of ${parseFloat(row.expected_return).toFixed(1)}%.`,\n                                    confidence: parseFloat(row.confidence || 0.88)\n                                });\n                            }\n                        } else if (functionName === 'analyze_seasonal_patterns') {\n                            if (insights.length < maxInsights) {\n                                // Generate insight from seasonal data\n                                const seasons = [];\n                                let highSeason = null;\n                                let highValue = 0;\n                                for (const row of functionResult.rows){\n                                    if (parseFloat(row.occupancy) > highValue) {\n                                        highValue = parseFloat(row.occupancy);\n                                        highSeason = row.month;\n                                    }\n                                    if (parseFloat(row.occupancy) > 0.8) {\n                                        seasons.push(row.month);\n                                    }\n                                }\n                                if (seasons.length > 0) {\n                                    const monthNames = [];\n                                    for (const monthNum of seasons){\n                                        const date = new Date(2023, monthNum - 1, 1);\n                                        monthNames.push(date.toLocaleString('default', {\n                                            month: 'long'\n                                        }));\n                                    }\n                                    insights.push({\n                                        id: insightId++,\n                                        type: 'roi',\n                                        title: 'Seasonal pricing opportunity',\n                                        description: `Demand analysis shows peak periods in ${monthNames.join(', ')}. Optimizing rates during these periods could increase annual returns.`,\n                                        confidence: 0.84\n                                    });\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    console.error(`Error calling function ${functionName}:`, err);\n                }\n            }\n        }\n        // If we have fact_market_data, generate insights from it\n        if (tables.includes('fact_market_data') && tables.includes('dim_market') && insights.length < maxInsights) {\n            try {\n                // Get top performing markets by RevPAR\n                const topMarketsQuery = `\n          SELECT m.market_name, AVG(f.revpar) as avg_revpar, \n                 CASE WHEN AVG(f.revpar) > 150 THEN 0.9\n                      WHEN AVG(f.revpar) > 120 THEN 0.85\n                      ELSE 0.8 END as confidence\n          FROM fact_market_data f\n          JOIN dim_market m ON f.market_key = m.market_key\n          GROUP BY m.market_name\n          ORDER BY avg_revpar DESC\n          LIMIT ${maxInsights - insights.length}\n        `;\n                const topMarketsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(topMarketsQuery);\n                if (topMarketsResult.rows && topMarketsResult.rows.length > 0) {\n                    for (const row of topMarketsResult.rows){\n                        if (insights.length >= maxInsights) break;\n                        if (!insights.some((insight)=>insight.title.includes(row.market_name))) {\n                            insights.push({\n                                id: insightId++,\n                                type: 'opportunity',\n                                title: `${row.market_name} market opportunity`,\n                                description: `${row.market_name} shows strong RevPAR performance at $${parseFloat(row.avg_revpar).toFixed(2)}, making it a top market for potential investment.`,\n                                confidence: parseFloat(row.confidence)\n                            });\n                        }\n                    }\n                }\n                // Get markets with high occupancy\n                if (insights.length < maxInsights) {\n                    const highOccupancyQuery = `\n            SELECT m.market_name, AVG(f.occupancy) as avg_occupancy,\n                   CASE WHEN AVG(f.occupancy) > 0.85 THEN 0.88\n                        WHEN AVG(f.occupancy) > 0.8 THEN 0.83\n                        ELSE 0.78 END as confidence\n            FROM fact_market_data f\n            JOIN dim_market m ON f.market_key = m.market_key\n            GROUP BY m.market_name\n            HAVING AVG(f.occupancy) > 0.75\n            ORDER BY avg_occupancy DESC\n            LIMIT ${maxInsights - insights.length}\n          `;\n                    const highOccupancyResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(highOccupancyQuery);\n                    if (highOccupancyResult.rows && highOccupancyResult.rows.length > 0) {\n                        for (const row of highOccupancyResult.rows){\n                            if (insights.length >= maxInsights) break;\n                            if (!insights.some((insight)=>insight.title.includes(row.market_name))) {\n                                insights.push({\n                                    id: insightId++,\n                                    type: 'roi',\n                                    title: `${row.market_name} ADR optimization`,\n                                    description: `With a high average occupancy of ${(parseFloat(row.avg_occupancy) * 100).toFixed(1)}%, ${row.market_name} hotels have potential for ADR optimization to increase RevPAR.`,\n                                    confidence: parseFloat(row.confidence)\n                                });\n                            }\n                        }\n                    }\n                }\n                // Check for markets with high RevPAR growth\n                if (insights.length < maxInsights) {\n                    // Use a query to calculate growth between years if possible\n                    try {\n                        const growthQuery = `\n              WITH current_year AS (\n                SELECT m.market_name, AVG(f.revpar) as revpar\n                FROM fact_market_data f\n                JOIN dim_market m ON f.market_key = m.market_key\n                WHERE f.year = 2023\n                GROUP BY m.market_name\n              ),\n              prev_year AS (\n                SELECT m.market_name, AVG(f.revpar) as revpar\n                FROM fact_market_data f\n                JOIN dim_market m ON f.market_key = m.market_key\n                WHERE f.year = 2022\n                GROUP BY m.market_name\n              )\n              SELECT c.market_name, \n                     c.revpar as current_revpar,\n                     p.revpar as prev_revpar,\n                     ((c.revpar - p.revpar) / p.revpar * 100) as growth,\n                     CASE WHEN ((c.revpar - p.revpar) / p.revpar * 100) > 10 THEN 0.87\n                          WHEN ((c.revpar - p.revpar) / p.revpar * 100) > 5 THEN 0.82\n                          ELSE 0.78 END as confidence\n              FROM current_year c\n              JOIN prev_year p ON c.market_name = p.market_name\n              WHERE ((c.revpar - p.revpar) / p.revpar * 100) > 5\n              ORDER BY growth DESC\n              LIMIT ${maxInsights - insights.length}\n            `;\n                        const growthResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(growthQuery);\n                        if (growthResult.rows && growthResult.rows.length > 0) {\n                            for (const row of growthResult.rows){\n                                if (insights.length >= maxInsights) break;\n                                if (!insights.some((insight)=>insight.title.includes(row.market_name))) {\n                                    insights.push({\n                                        id: insightId++,\n                                        type: 'opportunity',\n                                        title: `${row.market_name} growth trend`,\n                                        description: `${row.market_name} shows YoY RevPAR growth of ${parseFloat(row.growth).toFixed(1)}%, from $${parseFloat(row.prev_revpar).toFixed(2)} to $${parseFloat(row.current_revpar).toFixed(2)}.`,\n                                        confidence: parseFloat(row.confidence)\n                                    });\n                                }\n                            }\n                        }\n                    } catch (err) {\n                        console.error('Error calculating growth insights:', err);\n                    }\n                }\n            } catch (err) {\n                console.error('Error generating insights from fact_market_data:', err);\n            }\n        }\n        // If we have deals table, generate insights from it\n        if (tables.includes('deals') && insights.length < maxInsights) {\n            try {\n                // Check if we have deals with property info\n                const dealsQuery = `\n          SELECT COUNT(*) as deal_count, \n                 AVG(expected_return) as avg_return,\n                 MAX(investment_amount) as max_investment,\n                 MIN(investment_amount) as min_investment\n          FROM deals\n        `;\n                const dealsResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(dealsQuery);\n                if (dealsResult.rows && dealsResult.rows.length > 0) {\n                    const dealCount = parseInt(dealsResult.rows[0].deal_count);\n                    const avgReturn = parseFloat(dealsResult.rows[0].avg_return);\n                    if (dealCount > 0 && insights.length < maxInsights) {\n                        // Generate portfolio diversification insight based on real data\n                        insights.push({\n                            id: insightId++,\n                            type: 'roi',\n                            title: 'Portfolio diversification',\n                            description: `Analysis of your ${dealCount} deals shows an average return of ${avgReturn.toFixed(1)}%. Further geographic diversification could optimize risk-adjusted returns.`,\n                            confidence: 0.86\n                        });\n                    }\n                    // Get status distribution\n                    if (insights.length < maxInsights) {\n                        const statusQuery = `\n              SELECT status, COUNT(*) as count\n              FROM deals\n              GROUP BY status\n              ORDER BY count DESC\n            `;\n                        const statusResult = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(statusQuery);\n                        if (statusResult.rows && statusResult.rows.length > 0) {\n                            // Generate insight about deal statuses\n                            const draftCount = statusResult.rows.find((r)=>r.status === 'Draft')?.count || 0;\n                            if (draftCount > 0 && insights.length < maxInsights) {\n                                insights.push({\n                                    id: insightId++,\n                                    type: 'risk',\n                                    title: 'Pending deal finalization',\n                                    description: `You have ${draftCount} deals in draft status. Finalizing these deals could help meet your portfolio growth targets.`,\n                                    confidence: 0.85\n                                });\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error('Error generating insights from deals table:', err);\n            }\n        }\n        // If we couldn't generate any insights from real data, return an empty array\n        // No mock data fallbacks\n        // Ensure we only return up to maxInsights\n        const limitedInsights = insights.slice(0, maxInsights);\n        res.status(200).json(limitedInsights);\n    } catch (error) {\n        console.error('Error generating insights:', error);\n        // No mock data fallbacks, return empty array on error\n        res.status(200).json([]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/analytics/insights.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalytics%2Finsights&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalytics%5Cinsights.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();