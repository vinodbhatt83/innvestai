"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/activity-log";
exports.ids = ["pages/api/activity-log"];
exports.modules = {

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountManager: () => (/* binding */ accountManager),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   clientAccountManager: () => (/* binding */ clientAccountManager),\n/* harmony export */   clientAuth: () => (/* binding */ clientAuth)\n/* harmony export */ });\n// lib/auth.js\n// Declare variables to hold modules\nlet bcrypt;\nlet uuidv4;\nlet queryFn;\nlet poolObj;\n// Only initialize on the server\nif (true) {\n    try {\n        // Server-side imports\n        bcrypt = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n        const { v4 } = __webpack_require__(/*! uuid */ \"uuid\");\n        uuidv4 = v4;\n        // Import database functions - using dynamic import to avoid webpack issues\n        const dbModule = __webpack_require__(/*! ./db.js */ \"(api-node)/./lib/db.js\");\n        queryFn = dbModule.query;\n        poolObj = dbModule.pool;\n    } catch (error) {\n        console.error('Error initializing auth module:', error);\n        // Provide fallbacks if imports fail\n        bcrypt = {\n            hash: async ()=>'hash-function-not-available',\n            compare: async ()=>false\n        };\n        uuidv4 = ()=>'uuid-function-not-available';\n        queryFn = async ()=>{\n            throw new Error('Database query function not available');\n        };\n        poolObj = {\n            query: async ()=>{\n                throw new Error('Database pool not available');\n            }\n        };\n    }\n} else {}\n// Simple session-based authentication\nconst auth = {\n    // Create a hashed password\n    async hashPassword (password) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.hash(password, 10);\n    },\n    // Compare password with hash\n    async comparePassword (password, hash) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.compare(password, hash);\n    },\n    // Find user by email - server only\n    async findUserByEmail (email) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name \n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.email = $1`, [\n                email\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by email:', error);\n            throw error;\n        }\n    },\n    // Find user by ID - server only\n    async findUserById (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.user_id = $1`, [\n                userId\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by ID:', error);\n            throw error;\n        }\n    },\n    // Create a new session - server only\n    async createSession (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const sessionToken = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiration\n        try {\n            await queryFn('INSERT INTO sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                sessionToken,\n                expiresAt\n            ]);\n            return sessionToken;\n        } catch (error) {\n            console.error('Error creating session:', error);\n            throw error;\n        }\n    },\n    // Verify a session token - server only\n    async verifySession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        console.log('verifySession called with token', {\n            tokenLength: sessionToken ? sessionToken.length : 0,\n            tokenPrefix: sessionToken ? sessionToken.substring(0, 8) + '...' : 'none'\n        });\n        try {\n            const result = await queryFn(`SELECT u.*, s.session_id, s.expires_at, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM sessions s\n         JOIN users u ON s.user_id = u.user_id\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE s.session_token = $1 AND s.expires_at > NOW()`, [\n                sessionToken\n            ]);\n            console.log('verifySession query result', {\n                found: result.rowCount > 0,\n                userData: result.rowCount > 0 ? {\n                    user_id: result.rows[0].user_id,\n                    email: result.rows[0].email,\n                    account_id: result.rows[0].account_id,\n                    is_account_admin: result.rows[0].is_account_admin,\n                    account_name: result.rows[0].account_name,\n                    role_name: result.rows[0].role_name\n                } : null\n            });\n            // Add standard property names for consistency\n            if (result.rowCount > 0) {\n                const user = result.rows[0];\n                // Map database field names to the camelCase format expected by frontend\n                user.id = user.user_id;\n                user.firstName = user.first_name;\n                user.lastName = user.last_name;\n                user.accountId = user.account_id;\n                user.isAdmin = user.is_account_admin;\n                user.accountName = user.account_name;\n            }\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying session:', error);\n            throw error;\n        }\n    },\n    // Invalidate a session - server only\n    async invalidateSession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            await queryFn('DELETE FROM sessions WHERE session_token = $1', [\n                sessionToken\n            ]);\n            return true;\n        } catch (error) {\n            console.error('Error invalidating session:', error);\n            throw error;\n        }\n    },\n    // Create a password reset token - server only\n    async createPasswordResetToken (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const token = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setHours(expiresAt.getHours() + 24); // 24 hours expiration\n        try {\n            await queryFn('INSERT INTO password_reset_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                token,\n                expiresAt\n            ]);\n            return token;\n        } catch (error) {\n            console.error('Error creating password reset token:', error);\n            throw error;\n        }\n    },\n    // Verify a password reset token - server only\n    async verifyResetToken (token) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn('SELECT * FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW()', [\n                token\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying reset token:', error);\n            throw error;\n        }\n    },\n    // Reset password - server only\n    async resetPassword (token, newPassword) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const tokenRecord = await this.verifyResetToken(token);\n            if (!tokenRecord) {\n                return {\n                    success: false,\n                    error: 'Invalid or expired token'\n                };\n            }\n            const passwordHash = await this.hashPassword(newPassword);\n            // Update password\n            await queryFn('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE user_id = $2', [\n                passwordHash,\n                tokenRecord.user_id\n            ]);\n            // Delete the token\n            await queryFn('DELETE FROM password_reset_tokens WHERE token_id = $1', [\n                tokenRecord.token_id\n            ]);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error resetting password:', error);\n            throw error;\n        }\n    }\n};\n// Account management - all methods are server-only\nconst accountManager = {\n    // Create a new account with admin user\n    async createAccount (accountData, userData) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            // Start a transaction\n            await queryFn('BEGIN');\n            // Create account\n            const accountResult = await queryFn('INSERT INTO accounts (account_name, account_domain, plan_id, billing_email) VALUES ($1, $2, $3, $4) RETURNING *', [\n                accountData.accountName,\n                accountData.accountDomain || null,\n                accountData.planId || 1,\n                accountData.billingEmail\n            ]);\n            const account = accountResult.rows[0];\n            // Hash password\n            const passwordHash = await auth.hashPassword(userData.password);\n            // Create admin user (role_id 1 = Admin)\n            const userResult = await queryFn(`INSERT INTO users (account_id, email, password_hash, first_name, last_name, role_id, is_account_admin) \n         VALUES ($1, $2, $3, $4, $5, 1, TRUE) RETURNING *`, [\n                account.account_id,\n                userData.email,\n                passwordHash,\n                userData.firstName,\n                userData.lastName\n            ]);\n            const admin = userResult.rows[0];\n            // Commit transaction\n            await queryFn('COMMIT');\n            return {\n                account,\n                admin\n            };\n        } catch (error) {\n            // Rollback transaction on error\n            await queryFn('ROLLBACK');\n            console.error('Error creating account:', error);\n            throw error;\n        }\n    }\n};\n// Create mock implementations for client-side use\nconst createMockAuth = ()=>{\n    const mockAuth = {\n        // Mock implementations that are safe to use on the client\n        async hashPassword (password) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.hashPassword(password);\n            }\n            // On client, just return a placeholder (real hashing happens server-side)\n            console.warn('hashPassword called on client, real hashing will happen server-side');\n            return `mock-hash-${password.length}`;\n        },\n        async comparePassword (password, hash) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.comparePassword(password, hash);\n            }\n            // On client, just return a placeholder (real comparison happens server-side)\n            console.warn('comparePassword called on client, real comparison will happen server-side');\n            return false;\n        },\n        // These methods should be called via API endpoints on the client\n        async findUserByEmail () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async findUserById () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifySession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async invalidateSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createPasswordResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifyResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async resetPassword () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAuth;\n};\n// Create a mock account manager for client-side use\nconst createMockAccountManager = ()=>{\n    const mockAccountManager = {\n        // All methods should be called via API endpoints on the client\n        async createAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async getAccountUsers () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAccountManager;\n};\n// Export the appropriate implementations based on environment\nconst clientAuth =  false ? 0 : auth;\nconst clientAccountManager =  false ? 0 : accountManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Next.js supports ES modules by default\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQseUNBQXlDO0FBQ2xCIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbGliXFxkYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvZGIuanNcclxuXHJcbi8vIEluaXRpYWxpemUgcXVlcnkgYW5kIHBvb2wgYXMgbnVsbFxyXG5sZXQgcG9vbCA9IG51bGw7XHJcbmxldCBxdWVyeSA9IG51bGw7XHJcblxyXG4vLyBPbmx5IHJ1biB0aGlzIGNvZGUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgY29kZSAtIGltcG9ydCBwZyB1c2luZyByZXF1aXJlIHRvIGF2b2lkIHdlYnBhY2sgaXNzdWVzXHJcbiAgICBjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBwb29sXHJcbiAgICBwb29sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyBcclxuICAgICAgPyBuZXcgUG9vbCh7XHJcbiAgICAgICAgICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXHJcbiAgICAgICAgICBzc2w6IHtcclxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IFBvb2woe1xyXG4gICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAncG9zdGdyZXMnLFxyXG4gICAgICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcclxuICAgICAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdpbm52ZXN0YWknLCAvLyBVc2UgYnVpbHQtaW4gcG9zdGdyZXMgZGF0YWJhc2VcclxuICAgICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnVGVtcEAxMjMnLFxyXG4gICAgICAgICAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnNTQzMicpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIERlZmluZSB0aGUgcXVlcnkgZnVuY3Rpb25cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKHRleHQsIHBhcmFtcykgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9nIHF1ZXJ5IHBlcmZvcm1hbmNlIGluIGRldmVsb3BtZW50XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRlZCBxdWVyeScsIHsgdGV4dCwgZHVyYXRpb24sIHJvd3M6IHJlcy5yb3dDb3VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dXAgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBwb29sXHJcbiAgICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBkYXRhYmFzZSBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAvLyBEb24ndCBjcmFzaCB0aGUgc2VydmVyIG9uIGNvbm5lY3Rpb24gZXJyb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgbW9kdWxlIGluaXRpYWxpemVkIG9uIHNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBtb2R1bGU6JywgZXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgbm9uLWZ1bmN0aW9uYWwgc3R1YnMgaWYgaW5pdGlhbGl6YXRpb24gZmFpbHNcclxuICAgIHBvb2wgPSB7XHJcbiAgICAgIHF1ZXJ5OiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcG9vbCBub3QgaW5pdGlhbGl6ZWQnKTsgfSxcclxuICAgICAgb246ICgpID0+IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIHF1ZXJ5ID0gYXN5bmMgKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJ5IGZ1bmN0aW9uIG5vdCBpbml0aWFsaXplZCcpOyB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBtb2NrIGltcGxlbWVudGF0aW9uXHJcbiAgcXVlcnkgPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gIH07XHJcbiAgXHJcbiAgcG9vbCA9IHtcclxuICAgIHF1ZXJ5OiAoKSA9PiB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7XHJcbiAgICB9LFxyXG4gICAgb246ICgpID0+IHt9XHJcbiAgfTtcclxufVxyXG5cclxuLy8gTmV4dC5qcyBzdXBwb3J0cyBFUyBtb2R1bGVzIGJ5IGRlZmF1bHRcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./middleware/auth.js":
/*!****************************!*\
  !*** ./middleware/auth.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiAuthMiddleware: () => (/* binding */ apiAuthMiddleware),\n/* harmony export */   authMiddleware: () => (/* binding */ authMiddleware),\n/* harmony export */   getAuthenticatedUser: () => (/* binding */ getAuthenticatedUser),\n/* harmony export */   isAuthenticated: () => (/* binding */ isAuthenticated),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthRedirect: () => (/* binding */ withAuthRedirect),\n/* harmony export */   withPermission: () => (/* binding */ withPermission)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(api-node)/./node_modules/next/server.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_server__WEBPACK_IMPORTED_MODULE_0__);\n// middleware/auth.js\n\n// This middleware runs on the server (Edge runtime)\nasync function authMiddleware(req) {\n    const { pathname } = req.nextUrl;\n    // Public paths that don't require authentication\n    const publicPaths = [\n        '/login',\n        '/signup',\n        '/reset-password',\n        '/api/auth/login',\n        '/api/auth/signup',\n        '/api/auth/reset-password',\n        '/api/debug'\n    ];\n    // Check if the path is public\n    const isPublicPath = publicPaths.some((path)=>pathname === path || pathname.startsWith(path + '/'));\n    // Allow access to public paths\n    if (isPublicPath) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // Get the session token from cookies\n    const sessionToken = req.cookies.get('session_token')?.value;\n    // If no session token, redirect to login\n    if (!sessionToken) {\n        const url = new URL('/login', req.url);\n        url.searchParams.set('redirect', pathname);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n    }\n    // Note: We can't verify the session here since Edge runtime doesn't support database connections\n    // We'll rely on API routes to verify the session on each request that needs it\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n}\n// This is used client-side to check if user is authenticated\nasync function isAuthenticated() {\n    // This only runs in the browser\n    if (true) {\n        return false;\n    }\n    // Check for session token cookie\n    const cookies = document.cookie.split(';').reduce((acc, cookie)=>{\n        const [key, value] = cookie.trim().split('=');\n        acc[key] = value;\n        return acc;\n    }, {});\n    return !!cookies.session_token;\n}\n// This is only used server-side in API routes and server components\nconst apiAuthMiddleware = async (req, res, next)=>{\n    console.log('apiAuthMiddleware called', {\n        url: req.url,\n        method: req.method,\n        query: req.query\n    });\n    // Only run this on the server\n    if (false) {}\n    // Get the session token from cookies\n    const cookies = req.cookies;\n    const sessionToken = cookies.session_token;\n    console.log('Session token check', {\n        hasToken: !!sessionToken,\n        cookiesReceived: Object.keys(cookies)\n    });\n    // If no session token, return unauthorized\n    if (!sessionToken) {\n        console.log('No session token found, authentication required');\n        return res.status(401).json({\n            error: 'Authentication required'\n        });\n    }\n    try {\n        console.log('Verifying session token');\n        // Import auth only on server-side\n        const { auth } = __webpack_require__(/*! ../lib/auth */ \"(api-node)/./lib/auth.js\");\n        // Verify the session\n        const user = await auth.verifySession(sessionToken);\n        console.log('Session verification result', {\n            hasUser: !!user,\n            userId: user?.id,\n            userEmail: user?.email\n        });\n        // If session is invalid, return unauthorized\n        if (!user) {\n            console.log('Invalid or expired session');\n            return res.status(401).json({\n                error: 'Invalid or expired session'\n            });\n        }\n        // Attach user to request object\n        req.user = user;\n        console.log('User authenticated successfully', {\n            id: user.id,\n            email: user.email,\n            accountId: user.accountId,\n            isAdmin: user.isAdmin || user.is_account_admin\n        });\n        // Continue to the next middleware or handler\n        if (next) {\n            return next();\n        }\n        return true;\n    } catch (error) {\n        console.error('Auth middleware error:', error);\n        return res.status(500).json({\n            error: 'Authentication error'\n        });\n    }\n};\n// For use in API routes to get the authenticated user\nconst getAuthenticatedUser = async (req, res)=>{\n    const isAuthenticated = await apiAuthMiddleware(req, res);\n    return isAuthenticated === true ? req.user : null;\n};\n// withAuth HOC for protecting API routes with authentication\nconst withAuth = (handler)=>{\n    return async (req, res)=>{\n        try {\n            // Check if user is authenticated\n            const result = await apiAuthMiddleware(req, res);\n            // If the middleware returned a status code, it handled unauthorized\n            if (result !== true) {\n                return result;\n            }\n            // User is authenticated, so execute the handler\n            return await handler(req, res);\n        } catch (error) {\n            console.error('Error in withAuth middleware:', error);\n            return res.status(500).json({\n                error: 'An internal server error occurred'\n            });\n        }\n    };\n};\n// withPermission HOC for protecting API routes that need specific permissions\nconst withPermission = (handler, permission)=>{\n    return async (req, res)=>{\n        try {\n            console.log(`withPermission middleware called for permission: ${permission}`);\n            // First check authentication\n            const authResult = await apiAuthMiddleware(req, res);\n            if (authResult !== true) {\n                console.log('Authentication failed in withPermission', {\n                    authResult\n                });\n                return authResult;\n            }\n            console.log('User authenticated in withPermission', {\n                userId: req.user?.id,\n                email: req.user?.email,\n                permissions: req.user?.permissions,\n                isAccountAdmin: req.user?.is_account_admin\n            });\n            // Check permission - allow access if:\n            // 1. The user has the specific permission, OR\n            // 2. The user has 'all' permissions, OR\n            // 3. The user is an account admin\n            // 4. If no specific permission is required (null/undefined)\n            const user = req.user;\n            const hasPermission = !permission || user.permissions && (user.permissions[permission] === true || user.permissions.all === true || user.is_account_admin === true);\n            if (!hasPermission) {\n                console.log('Permission denied in withPermission', {\n                    requiredPermission: permission,\n                    userPermissions: user.permissions,\n                    isAdmin: user.is_account_admin\n                });\n                return res.status(403).json({\n                    error: 'You do not have permission to access this resource'\n                });\n            }\n            console.log('Permission granted in withPermission', {\n                permission\n            });\n            // User is authenticated and has permission, so execute the handler\n            return await handler(req, res);\n        } catch (error) {\n            console.error('Error in withPermission middleware:', error);\n            return res.status(500).json({\n                error: 'An internal server error occurred'\n            });\n        }\n    };\n};\n// withAuthRedirect HOC for client-side auth checking with redirect\nconst withAuthRedirect = (Component, options = {\n    adminOnly: false\n})=>{\n    // This is just a wrapper around withAuthProtection for consistency\n    return Component;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./middleware/auth.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Factivity-log&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cactivity-log.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Factivity-log&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cactivity-log.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_activity_log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\activity-log.js */ \"(api-node)/./pages/api/activity-log.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_activity_log_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_activity_log_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/activity-log\",\n        pathname: \"/api/activity-log\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_activity_log_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGYWN0aXZpdHktbG9nJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhY3Rpdml0eS1sb2cuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDMEQ7QUFDMUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHVEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx1REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxhY3Rpdml0eS1sb2cuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FjdGl2aXR5LWxvZ1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FjdGl2aXR5LWxvZ1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Factivity-log&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cactivity-log.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/activity-log.js":
/*!***********************************!*\
  !*** ./pages/api/activity-log.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _middleware_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../middleware/auth */ \"(api-node)/./middleware/auth.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/db */ \"(api-node)/./lib/db.js\");\n// API endpoint for activity logging\n\n\n// Create activity log table if it doesn't exist\nasync function ensureActivityLogTableExists() {\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.pool.connect();\n    try {\n        await client.query(`\n      CREATE TABLE IF NOT EXISTS activity_logs (\n        log_id SERIAL PRIMARY KEY,\n        user_id INT NOT NULL,\n        action VARCHAR(50) NOT NULL,\n        entity_type VARCHAR(50) NOT NULL,\n        entity_id INT NOT NULL,\n        details TEXT,\n        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users(user_id)\n      )\n    `);\n    } catch (error) {\n        console.error('Error ensuring activity log table exists:', error);\n    } finally{\n        client.release();\n    }\n}\n// Handle logging an activity\nasync function logActivity(data) {\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.pool.connect();\n    try {\n        // Ensure table exists\n        await ensureActivityLogTableExists();\n        // Insert activity log\n        const result = await client.query(`INSERT INTO activity_logs \n       (user_id, action, entity_type, entity_id, details, timestamp)\n       VALUES ($1, $2, $3, $4, $5, $6)\n       RETURNING log_id`, [\n            data.user_id,\n            data.action,\n            data.entity_type,\n            data.entity_id,\n            data.details,\n            data.timestamp || new Date()\n        ]);\n        return {\n            success: true,\n            log_id: result.rows[0].log_id\n        };\n    } catch (error) {\n        console.error('Error logging activity:', error);\n        throw error;\n    } finally{\n        client.release();\n    }\n}\n// Handle getting activity logs for an entity\nasync function getActivityLogs(entityType, entityId, limit = 100) {\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_1__.pool.connect();\n    try {\n        const result = await client.query(`SELECT al.*, u.username, u.email\n       FROM activity_logs al\n       JOIN users u ON al.user_id = u.user_id\n       WHERE al.entity_type = $1 AND al.entity_id = $2\n       ORDER BY al.timestamp DESC\n       LIMIT $3`, [\n            entityType,\n            entityId,\n            limit\n        ]);\n        return result.rows;\n    } catch (error) {\n        console.error('Error getting activity logs:', error);\n        throw error;\n    } finally{\n        client.release();\n    }\n}\nasync function handler(req, res) {\n    if (req.method === 'POST') {\n        try {\n            const result = await logActivity(req.body);\n            return res.status(200).json(result);\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Error logging activity'\n            });\n        }\n    } else if (req.method === 'GET') {\n        try {\n            const { entity_type, entity_id, limit } = req.query;\n            if (!entity_type || !entity_id) {\n                return res.status(400).json({\n                    error: 'Missing required parameters'\n                });\n            }\n            const logs = await getActivityLogs(entity_type, parseInt(entity_id), limit ? parseInt(limit) : 100);\n            return res.status(200).json({\n                logs\n            });\n        } catch (error) {\n            return res.status(500).json({\n                error: 'Error getting activity logs'\n            });\n        }\n    } else {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n}\n// Export with auth middleware\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_middleware_auth__WEBPACK_IMPORTED_MODULE_0__.withAuth)(handler));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUIsT0FBTztZQUE4QjtRQUNyRTtJQUNGLE9BQU87UUFDTCxPQUFPc0IsSUFBSUcsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFMUIsT0FBTztRQUFxQjtJQUM1RDtBQUNGO0FBRUEsOEJBQThCO0FBQzlCLGlFQUFlTiwwREFBUUEsQ0FBQzBCLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFx2aW5vZFxccHJvamVjdHNcXGlubnZlc3RcXFBPQ1xcaW5udmVzdGFpXFxwYWdlc1xcYXBpXFxhY3Rpdml0eS1sb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQVBJIGVuZHBvaW50IGZvciBhY3Rpdml0eSBsb2dnaW5nXHJcbmltcG9ydCB7IHdpdGhBdXRoIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZS9hdXRoJztcclxuaW1wb3J0IHsgcG9vbCB9IGZyb20gJy4uLy4uL2xpYi9kYic7XHJcblxyXG4vLyBDcmVhdGUgYWN0aXZpdHkgbG9nIHRhYmxlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuYXN5bmMgZnVuY3Rpb24gZW5zdXJlQWN0aXZpdHlMb2dUYWJsZUV4aXN0cygpIHtcclxuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgY2xpZW50LnF1ZXJ5KGBcclxuICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYWN0aXZpdHlfbG9ncyAoXHJcbiAgICAgICAgbG9nX2lkIFNFUklBTCBQUklNQVJZIEtFWSxcclxuICAgICAgICB1c2VyX2lkIElOVCBOT1QgTlVMTCxcclxuICAgICAgICBhY3Rpb24gVkFSQ0hBUig1MCkgTk9UIE5VTEwsXHJcbiAgICAgICAgZW50aXR5X3R5cGUgVkFSQ0hBUig1MCkgTk9UIE5VTEwsXHJcbiAgICAgICAgZW50aXR5X2lkIElOVCBOT1QgTlVMTCxcclxuICAgICAgICBkZXRhaWxzIFRFWFQsXHJcbiAgICAgICAgdGltZXN0YW1wIFRJTUVTVEFNUCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxyXG4gICAgICAgIEZPUkVJR04gS0VZICh1c2VyX2lkKSBSRUZFUkVOQ0VTIHVzZXJzKHVzZXJfaWQpXHJcbiAgICAgIClcclxuICAgIGApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBlbnN1cmluZyBhY3Rpdml0eSBsb2cgdGFibGUgZXhpc3RzOicsIGVycm9yKTtcclxuICB9IGZpbmFsbHkge1xyXG4gICAgY2xpZW50LnJlbGVhc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEhhbmRsZSBsb2dnaW5nIGFuIGFjdGl2aXR5XHJcbmFzeW5jIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KGRhdGEpIHtcclxuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcclxuICB0cnkge1xyXG4gICAgLy8gRW5zdXJlIHRhYmxlIGV4aXN0c1xyXG4gICAgYXdhaXQgZW5zdXJlQWN0aXZpdHlMb2dUYWJsZUV4aXN0cygpO1xyXG4gICAgXHJcbiAgICAvLyBJbnNlcnQgYWN0aXZpdHkgbG9nXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQucXVlcnkoXHJcbiAgICAgIGBJTlNFUlQgSU5UTyBhY3Rpdml0eV9sb2dzIFxyXG4gICAgICAgKHVzZXJfaWQsIGFjdGlvbiwgZW50aXR5X3R5cGUsIGVudGl0eV9pZCwgZGV0YWlscywgdGltZXN0YW1wKVxyXG4gICAgICAgVkFMVUVTICgkMSwgJDIsICQzLCAkNCwgJDUsICQ2KVxyXG4gICAgICAgUkVUVVJOSU5HIGxvZ19pZGAsXHJcbiAgICAgIFtcclxuICAgICAgICBkYXRhLnVzZXJfaWQsXHJcbiAgICAgICAgZGF0YS5hY3Rpb24sXHJcbiAgICAgICAgZGF0YS5lbnRpdHlfdHlwZSxcclxuICAgICAgICBkYXRhLmVudGl0eV9pZCxcclxuICAgICAgICBkYXRhLmRldGFpbHMsXHJcbiAgICAgICAgZGF0YS50aW1lc3RhbXAgfHwgbmV3IERhdGUoKVxyXG4gICAgICBdXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBsb2dfaWQ6IHJlc3VsdC5yb3dzWzBdLmxvZ19pZCB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2dnaW5nIGFjdGl2aXR5OicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH0gZmluYWxseSB7XHJcbiAgICBjbGllbnQucmVsZWFzZSgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSGFuZGxlIGdldHRpbmcgYWN0aXZpdHkgbG9ncyBmb3IgYW4gZW50aXR5XHJcbmFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2aXR5TG9ncyhlbnRpdHlUeXBlLCBlbnRpdHlJZCwgbGltaXQgPSAxMDApIHtcclxuICBjb25zdCBjbGllbnQgPSBhd2FpdCBwb29sLmNvbm5lY3QoKTtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xpZW50LnF1ZXJ5KFxyXG4gICAgICBgU0VMRUNUIGFsLiosIHUudXNlcm5hbWUsIHUuZW1haWxcclxuICAgICAgIEZST00gYWN0aXZpdHlfbG9ncyBhbFxyXG4gICAgICAgSk9JTiB1c2VycyB1IE9OIGFsLnVzZXJfaWQgPSB1LnVzZXJfaWRcclxuICAgICAgIFdIRVJFIGFsLmVudGl0eV90eXBlID0gJDEgQU5EIGFsLmVudGl0eV9pZCA9ICQyXHJcbiAgICAgICBPUkRFUiBCWSBhbC50aW1lc3RhbXAgREVTQ1xyXG4gICAgICAgTElNSVQgJDNgLFxyXG4gICAgICBbZW50aXR5VHlwZSwgZW50aXR5SWQsIGxpbWl0XVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdC5yb3dzO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGFjdGl2aXR5IGxvZ3M6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGNsaWVudC5yZWxlYXNlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XHJcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9nQWN0aXZpdHkocmVxLmJvZHkpO1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRXJyb3IgbG9nZ2luZyBhY3Rpdml0eScgfSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChyZXEubWV0aG9kID09PSAnR0VUJykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBlbnRpdHlfdHlwZSwgZW50aXR5X2lkLCBsaW1pdCB9ID0gcmVxLnF1ZXJ5O1xyXG4gICAgICBcclxuICAgICAgaWYgKCFlbnRpdHlfdHlwZSB8fCAhZW50aXR5X2lkKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcnMnIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBsb2dzID0gYXdhaXQgZ2V0QWN0aXZpdHlMb2dzKFxyXG4gICAgICAgIGVudGl0eV90eXBlLCBcclxuICAgICAgICBwYXJzZUludChlbnRpdHlfaWQpLCBcclxuICAgICAgICBsaW1pdCA/IHBhcnNlSW50KGxpbWl0KSA6IDEwMFxyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbG9ncyB9KTsgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBnZXR0aW5nIGFjdGl2aXR5IGxvZ3MnIH0pO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgd2l0aCBhdXRoIG1pZGRsZXdhcmVcclxuZXhwb3J0IGRlZmF1bHQgd2l0aEF1dGgoaGFuZGxlcik7XHJcbiJdLCJuYW1lcyI6WyJ3aXRoQXV0aCIsInBvb2wiLCJlbnN1cmVBY3Rpdml0eUxvZ1RhYmxlRXhpc3RzIiwiY2xpZW50IiwiY29ubmVjdCIsInF1ZXJ5IiwiZXJyb3IiLCJjb25zb2xlIiwicmVsZWFzZSIsImxvZ0FjdGl2aXR5IiwiZGF0YSIsInJlc3VsdCIsInVzZXJfaWQiLCJhY3Rpb24iLCJlbnRpdHlfdHlwZSIsImVudGl0eV9pZCIsImRldGFpbHMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwic3VjY2VzcyIsImxvZ19pZCIsInJvd3MiLCJnZXRBY3Rpdml0eUxvZ3MiLCJlbnRpdHlUeXBlIiwiZW50aXR5SWQiLCJsaW1pdCIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJib2R5Iiwic3RhdHVzIiwianNvbiIsImxvZ3MiLCJwYXJzZUludCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/activity-log.js\n");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("uuid");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Factivity-log&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cactivity-log.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();