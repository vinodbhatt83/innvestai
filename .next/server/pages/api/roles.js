"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/roles";
exports.ids = ["pages/api/roles"];
exports.modules = {

/***/ "(api-node)/./lib/auth.js":
/*!*********************!*\
  !*** ./lib/auth.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountManager: () => (/* binding */ accountManager),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   clientAccountManager: () => (/* binding */ clientAccountManager),\n/* harmony export */   clientAuth: () => (/* binding */ clientAuth)\n/* harmony export */ });\n// lib/auth.js\n// Declare variables to hold modules\nlet bcrypt;\nlet uuidv4;\nlet queryFn;\nlet poolObj;\n// Only initialize on the server\nif (true) {\n    try {\n        // Server-side imports\n        bcrypt = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n        const { v4 } = __webpack_require__(/*! uuid */ \"uuid\");\n        uuidv4 = v4;\n        // Import database functions - using dynamic import to avoid webpack issues\n        const dbModule = __webpack_require__(/*! ./db.js */ \"(api-node)/./lib/db.js\");\n        queryFn = dbModule.query;\n        poolObj = dbModule.pool;\n    } catch (error) {\n        console.error('Error initializing auth module:', error);\n        // Provide fallbacks if imports fail\n        bcrypt = {\n            hash: async ()=>'hash-function-not-available',\n            compare: async ()=>false\n        };\n        uuidv4 = ()=>'uuid-function-not-available';\n        queryFn = async ()=>{\n            throw new Error('Database query function not available');\n        };\n        poolObj = {\n            query: async ()=>{\n                throw new Error('Database pool not available');\n            }\n        };\n    }\n} else {}\n// Simple session-based authentication\nconst auth = {\n    // Create a hashed password\n    async hashPassword (password) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.hash(password, 10);\n    },\n    // Compare password with hash\n    async comparePassword (password, hash) {\n        // Can run on client or server, but only does real work on server\n        if (false) {}\n        return await bcrypt.compare(password, hash);\n    },\n    // Find user by email - server only\n    async findUserByEmail (email) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name \n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.email = $1`, [\n                email\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by email:', error);\n            throw error;\n        }\n    },\n    // Find user by ID - server only\n    async findUserById (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM users u\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE u.user_id = $1`, [\n                userId\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error finding user by ID:', error);\n            throw error;\n        }\n    },\n    // Create a new session - server only\n    async createSession (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const sessionToken = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiration\n        try {\n            await queryFn('INSERT INTO sessions (user_id, session_token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                sessionToken,\n                expiresAt\n            ]);\n            return sessionToken;\n        } catch (error) {\n            console.error('Error creating session:', error);\n            throw error;\n        }\n    },\n    // Verify a session token - server only\n    async verifySession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn(`SELECT u.*, s.session_id, s.expires_at, a.account_name, a.is_active as account_is_active, r.role_name, r.permissions\n         FROM sessions s\n         JOIN users u ON s.user_id = u.user_id\n         JOIN accounts a ON u.account_id = a.account_id\n         JOIN roles r ON u.role_id = r.role_id\n         WHERE s.session_token = $1 AND s.expires_at > NOW()`, [\n                sessionToken\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying session:', error);\n            throw error;\n        }\n    },\n    // Invalidate a session - server only\n    async invalidateSession (sessionToken) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            await queryFn('DELETE FROM sessions WHERE session_token = $1', [\n                sessionToken\n            ]);\n            return true;\n        } catch (error) {\n            console.error('Error invalidating session:', error);\n            throw error;\n        }\n    },\n    // Create a password reset token - server only\n    async createPasswordResetToken (userId) {\n        // Ensure we're running on the server\n        if (false) {}\n        const token = uuidv4();\n        const expiresAt = new Date();\n        expiresAt.setHours(expiresAt.getHours() + 24); // 24 hours expiration\n        try {\n            await queryFn('INSERT INTO password_reset_tokens (user_id, token, expires_at) VALUES ($1, $2, $3)', [\n                userId,\n                token,\n                expiresAt\n            ]);\n            return token;\n        } catch (error) {\n            console.error('Error creating password reset token:', error);\n            throw error;\n        }\n    },\n    // Verify a password reset token - server only\n    async verifyResetToken (token) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const result = await queryFn('SELECT * FROM password_reset_tokens WHERE token = $1 AND expires_at > NOW()', [\n                token\n            ]);\n            return result.rows[0] || null;\n        } catch (error) {\n            console.error('Error verifying reset token:', error);\n            throw error;\n        }\n    },\n    // Reset password - server only\n    async resetPassword (token, newPassword) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            const tokenRecord = await this.verifyResetToken(token);\n            if (!tokenRecord) {\n                return {\n                    success: false,\n                    error: 'Invalid or expired token'\n                };\n            }\n            const passwordHash = await this.hashPassword(newPassword);\n            // Update password\n            await queryFn('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE user_id = $2', [\n                passwordHash,\n                tokenRecord.user_id\n            ]);\n            // Delete the token\n            await queryFn('DELETE FROM password_reset_tokens WHERE token_id = $1', [\n                tokenRecord.token_id\n            ]);\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error resetting password:', error);\n            throw error;\n        }\n    }\n};\n// Account management - all methods are server-only\nconst accountManager = {\n    // Create a new account with admin user\n    async createAccount (accountData, userData) {\n        // Ensure we're running on the server\n        if (false) {}\n        try {\n            // Start a transaction\n            await queryFn('BEGIN');\n            // Create account\n            const accountResult = await queryFn('INSERT INTO accounts (account_name, account_domain, plan_id, billing_email) VALUES ($1, $2, $3, $4) RETURNING *', [\n                accountData.accountName,\n                accountData.accountDomain || null,\n                accountData.planId || 1,\n                accountData.billingEmail\n            ]);\n            const account = accountResult.rows[0];\n            // Hash password\n            const passwordHash = await auth.hashPassword(userData.password);\n            // Create admin user (role_id 1 = Admin)\n            const userResult = await queryFn(`INSERT INTO users (account_id, email, password_hash, first_name, last_name, role_id, is_account_admin) \n         VALUES ($1, $2, $3, $4, $5, 1, TRUE) RETURNING *`, [\n                account.account_id,\n                userData.email,\n                passwordHash,\n                userData.firstName,\n                userData.lastName\n            ]);\n            const admin = userResult.rows[0];\n            // Commit transaction\n            await queryFn('COMMIT');\n            return {\n                account,\n                admin\n            };\n        } catch (error) {\n            // Rollback transaction on error\n            await queryFn('ROLLBACK');\n            console.error('Error creating account:', error);\n            throw error;\n        }\n    }\n};\n// Create mock implementations for client-side use\nconst createMockAuth = ()=>{\n    const mockAuth = {\n        // Mock implementations that are safe to use on the client\n        async hashPassword (password) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.hashPassword(password);\n            }\n            // On client, just return a placeholder (real hashing happens server-side)\n            console.warn('hashPassword called on client, real hashing will happen server-side');\n            return `mock-hash-${password.length}`;\n        },\n        async comparePassword (password, hash) {\n            if (true) {\n                // When running on the server, use the real implementation\n                return auth.comparePassword(password, hash);\n            }\n            // On client, just return a placeholder (real comparison happens server-side)\n            console.warn('comparePassword called on client, real comparison will happen server-side');\n            return false;\n        },\n        // These methods should be called via API endpoints on the client\n        async findUserByEmail () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async findUserById () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifySession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async invalidateSession () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createPasswordResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async verifyResetToken () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async resetPassword () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAuth;\n};\n// Create a mock account manager for client-side use\nconst createMockAccountManager = ()=>{\n    const mockAccountManager = {\n        // All methods should be called via API endpoints on the client\n        async createAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async getAccountUsers () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async createUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateUser () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        },\n        async updateAccount () {\n            throw new Error('This method should be called via an API endpoint on client-side');\n        }\n    };\n    return mockAccountManager;\n};\n// Export the appropriate implementations based on environment\nconst clientAuth =  false ? 0 : auth;\nconst clientAccountManager =  false ? 0 : accountManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlFO1FBQ2pFLE1BQU1HO1lBQ0osTUFBTSxJQUFJUCxNQUFNO1FBQ2xCO1FBRUEsTUFBTVc7WUFDSixNQUFNLElBQUlYLE1BQU07UUFDbEI7UUFFQSxNQUFNYTtZQUNKLE1BQU0sSUFBSWIsTUFBTTtRQUNsQjtRQUVBLE1BQU1tQjtZQUNKLE1BQU0sSUFBSW5CLE1BQU07UUFDbEI7UUFFQSxNQUFNb0I7WUFDSixNQUFNLElBQUlwQixNQUFNO1FBQ2xCO1FBRUEsTUFBTXFCO1lBQ0osTUFBTSxJQUFJckIsTUFBTTtRQUNsQjtRQUVBLE1BQU15QjtZQUNKLE1BQU0sSUFBSXpCLE1BQU07UUFDbEI7UUFFQSxNQUFNMEI7WUFDSixNQUFNLElBQUkxQixNQUFNO1FBQ2xCO0lBQ0Y7SUFFQSxPQUFPaUQ7QUFDVDtBQUVBLG9EQUFvRDtBQUNwRCxNQUFNQywyQkFBMkI7SUFDL0IsTUFBTUMscUJBQXFCO1FBQ3pCLCtEQUErRDtRQUMvRCxNQUFNakI7WUFDSixNQUFNLElBQUlsQyxNQUFNO1FBQ2xCO1FBRUEsTUFBTW9EO1lBQ0osTUFBTSxJQUFJcEQsTUFBTTtRQUNsQjtRQUVBLE1BQU1xRDtZQUNKLE1BQU0sSUFBSXJELE1BQU07UUFDbEI7UUFFQSxNQUFNc0Q7WUFDSixNQUFNLElBQUl0RCxNQUFNO1FBQ2xCO1FBRUEsTUFBTXVEO1lBQ0osTUFBTSxJQUFJdkQsTUFBTTtRQUNsQjtJQUNGO0lBRUEsT0FBT21EO0FBQ1Q7QUFFQSw4REFBOEQ7QUFDdkQsTUFBTUssYUFBYSxNQUE2QixHQUFHUixDQUFnQkEsR0FBRy9DLEtBQUs7QUFDM0UsTUFBTXdELHVCQUF1QixNQUE2QixHQUFHUCxDQUEwQkEsR0FBR2pCLGVBQWUiLCJzb3VyY2VzIjpbIkM6XFx2aW5vZFxccHJvamVjdHNcXGlubnZlc3RcXFBPQ1xcaW5udmVzdGFpXFxsaWJcXGF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2F1dGguanNcclxuXHJcbi8vIERlY2xhcmUgdmFyaWFibGVzIHRvIGhvbGQgbW9kdWxlc1xyXG5sZXQgYmNyeXB0O1xyXG5sZXQgdXVpZHY0O1xyXG5sZXQgcXVlcnlGbjtcclxubGV0IHBvb2xPYmo7XHJcblxyXG4vLyBPbmx5IGluaXRpYWxpemUgb24gdGhlIHNlcnZlclxyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU2VydmVyLXNpZGUgaW1wb3J0c1xyXG4gICAgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKTtcclxuICAgIGNvbnN0IHsgdjQgfSA9IHJlcXVpcmUoJ3V1aWQnKTtcclxuICAgIHV1aWR2NCA9IHY0O1xyXG4gICAgXHJcbiAgICAvLyBJbXBvcnQgZGF0YWJhc2UgZnVuY3Rpb25zIC0gdXNpbmcgZHluYW1pYyBpbXBvcnQgdG8gYXZvaWQgd2VicGFjayBpc3N1ZXNcclxuICAgIGNvbnN0IGRiTW9kdWxlID0gcmVxdWlyZSgnLi9kYi5qcycpO1xyXG4gICAgcXVlcnlGbiA9IGRiTW9kdWxlLnF1ZXJ5O1xyXG4gICAgcG9vbE9iaiA9IGRiTW9kdWxlLnBvb2w7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBhdXRoIG1vZHVsZTonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIFByb3ZpZGUgZmFsbGJhY2tzIGlmIGltcG9ydHMgZmFpbFxyXG4gICAgYmNyeXB0ID0ge1xyXG4gICAgICBoYXNoOiBhc3luYyAoKSA9PiAnaGFzaC1mdW5jdGlvbi1ub3QtYXZhaWxhYmxlJyxcclxuICAgICAgY29tcGFyZTogYXN5bmMgKCkgPT4gZmFsc2VcclxuICAgIH07XHJcbiAgICB1dWlkdjQgPSAoKSA9PiAndXVpZC1mdW5jdGlvbi1ub3QtYXZhaWxhYmxlJztcclxuICAgIHF1ZXJ5Rm4gPSBhc3luYyAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcnkgZnVuY3Rpb24gbm90IGF2YWlsYWJsZScpOyB9O1xyXG4gICAgcG9vbE9iaiA9IHsgcXVlcnk6IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBwb29sIG5vdCBhdmFpbGFibGUnKTsgfSB9O1xyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBDbGllbnQtc2lkZSBzdHVic1xyXG4gIGJjcnlwdCA9IHtcclxuICAgIGhhc2g6IGFzeW5jICgpID0+ICdjbGllbnQtc2lkZS1zdHViLWhhc2gnLFxyXG4gICAgY29tcGFyZTogYXN5bmMgKCkgPT4gZmFsc2VcclxuICB9O1xyXG4gIHV1aWR2NCA9ICgpID0+ICdjbGllbnQtc2lkZS1zdHViLXV1aWQnO1xyXG4gIHF1ZXJ5Rm4gPSBhc3luYyAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignRGF0YWJhc2UgcXVlcmllcyBjYW5ub3QgYmUgZXhlY3V0ZWQgb24gdGhlIGNsaWVudCBzaWRlJyk7IH07XHJcbiAgcG9vbE9iaiA9IHsgcXVlcnk6IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBwb29sIGNhbm5vdCBiZSB1c2VkIG9uIHRoZSBjbGllbnQgc2lkZScpOyB9IH07XHJcbn1cclxuXHJcbi8vIFNpbXBsZSBzZXNzaW9uLWJhc2VkIGF1dGhlbnRpY2F0aW9uXHJcbmV4cG9ydCBjb25zdCBhdXRoID0ge1xyXG4gIC8vIENyZWF0ZSBhIGhhc2hlZCBwYXNzd29yZFxyXG4gIGFzeW5jIGhhc2hQYXNzd29yZChwYXNzd29yZCkge1xyXG4gICAgLy8gQ2FuIHJ1biBvbiBjbGllbnQgb3Igc2VydmVyLCBidXQgb25seSBkb2VzIHJlYWwgd29yayBvbiBzZXJ2ZXJcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ2hhc2hQYXNzd29yZCBjYWxsZWQgb24gY2xpZW50LCByZWFsIGhhc2hpbmcgd2lsbCBoYXBwZW4gc2VydmVyLXNpZGUnKTtcclxuICAgICAgcmV0dXJuIGBtb2NrLWhhc2gtJHtwYXNzd29yZC5sZW5ndGh9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBhd2FpdCBiY3J5cHQuaGFzaChwYXNzd29yZCwgMTApO1xyXG4gIH0sXHJcblxyXG4gIC8vIENvbXBhcmUgcGFzc3dvcmQgd2l0aCBoYXNoXHJcbiAgYXN5bmMgY29tcGFyZVBhc3N3b3JkKHBhc3N3b3JkLCBoYXNoKSB7XHJcbiAgICAvLyBDYW4gcnVuIG9uIGNsaWVudCBvciBzZXJ2ZXIsIGJ1dCBvbmx5IGRvZXMgcmVhbCB3b3JrIG9uIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignY29tcGFyZVBhc3N3b3JkIGNhbGxlZCBvbiBjbGllbnQsIHJlYWwgY29tcGFyaXNvbiB3aWxsIGhhcHBlbiBzZXJ2ZXItc2lkZScpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIGhhc2gpO1xyXG4gIH0sXHJcblxyXG4gIC8vIEZpbmQgdXNlciBieSBlbWFpbCAtIHNlcnZlciBvbmx5XHJcbiAgYXN5bmMgZmluZFVzZXJCeUVtYWlsKGVtYWlsKSB7XHJcbiAgICAvLyBFbnN1cmUgd2UncmUgcnVubmluZyBvbiB0aGUgc2VydmVyXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgc2VydmVyIHNpZGUnKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeUZuKFxyXG4gICAgICAgIGBTRUxFQ1QgdS4qLCBhLmFjY291bnRfbmFtZSwgYS5pc19hY3RpdmUgYXMgYWNjb3VudF9pc19hY3RpdmUsIHIucm9sZV9uYW1lIFxyXG4gICAgICAgICBGUk9NIHVzZXJzIHVcclxuICAgICAgICAgSk9JTiBhY2NvdW50cyBhIE9OIHUuYWNjb3VudF9pZCA9IGEuYWNjb3VudF9pZFxyXG4gICAgICAgICBKT0lOIHJvbGVzIHIgT04gdS5yb2xlX2lkID0gci5yb2xlX2lkXHJcbiAgICAgICAgIFdIRVJFIHUuZW1haWwgPSAkMWAsXHJcbiAgICAgICAgW2VtYWlsXVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdC5yb3dzWzBdIHx8IG51bGw7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmaW5kaW5nIHVzZXIgYnkgZW1haWw6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBGaW5kIHVzZXIgYnkgSUQgLSBzZXJ2ZXIgb25seVxyXG4gIGFzeW5jIGZpbmRVc2VyQnlJZCh1c2VySWQpIHtcclxuICAgIC8vIEVuc3VyZSB3ZSdyZSBydW5uaW5nIG9uIHRoZSBzZXJ2ZXJcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSBzZXJ2ZXIgc2lkZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5Rm4oXHJcbiAgICAgICAgYFNFTEVDVCB1LiosIGEuYWNjb3VudF9uYW1lLCBhLmlzX2FjdGl2ZSBhcyBhY2NvdW50X2lzX2FjdGl2ZSwgci5yb2xlX25hbWUsIHIucGVybWlzc2lvbnNcclxuICAgICAgICAgRlJPTSB1c2VycyB1XHJcbiAgICAgICAgIEpPSU4gYWNjb3VudHMgYSBPTiB1LmFjY291bnRfaWQgPSBhLmFjY291bnRfaWRcclxuICAgICAgICAgSk9JTiByb2xlcyByIE9OIHUucm9sZV9pZCA9IHIucm9sZV9pZFxyXG4gICAgICAgICBXSEVSRSB1LnVzZXJfaWQgPSAkMWAsXHJcbiAgICAgICAgW3VzZXJJZF1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQucm93c1swXSB8fCBudWxsO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmluZGluZyB1c2VyIGJ5IElEOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gQ3JlYXRlIGEgbmV3IHNlc3Npb24gLSBzZXJ2ZXIgb25seVxyXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24odXNlcklkKSB7XHJcbiAgICAvLyBFbnN1cmUgd2UncmUgcnVubmluZyBvbiB0aGUgc2VydmVyXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgc2VydmVyIHNpZGUnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSB1dWlkdjQoKTtcclxuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKCk7XHJcbiAgICBleHBpcmVzQXQuc2V0RGF0ZShleHBpcmVzQXQuZ2V0RGF0ZSgpICsgNyk7IC8vIDcgZGF5cyBleHBpcmF0aW9uXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgcXVlcnlGbihcclxuICAgICAgICAnSU5TRVJUIElOVE8gc2Vzc2lvbnMgKHVzZXJfaWQsIHNlc3Npb25fdG9rZW4sIGV4cGlyZXNfYXQpIFZBTFVFUyAoJDEsICQyLCAkMyknLFxyXG4gICAgICAgIFt1c2VySWQsIHNlc3Npb25Ub2tlbiwgZXhwaXJlc0F0XVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHNlc3Npb25Ub2tlbjtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHNlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBWZXJpZnkgYSBzZXNzaW9uIHRva2VuIC0gc2VydmVyIG9ubHlcclxuICBhc3luYyB2ZXJpZnlTZXNzaW9uKHNlc3Npb25Ub2tlbikge1xyXG4gICAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHNlcnZlciBzaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcXVlcnlGbihcclxuICAgICAgICBgU0VMRUNUIHUuKiwgcy5zZXNzaW9uX2lkLCBzLmV4cGlyZXNfYXQsIGEuYWNjb3VudF9uYW1lLCBhLmlzX2FjdGl2ZSBhcyBhY2NvdW50X2lzX2FjdGl2ZSwgci5yb2xlX25hbWUsIHIucGVybWlzc2lvbnNcclxuICAgICAgICAgRlJPTSBzZXNzaW9ucyBzXHJcbiAgICAgICAgIEpPSU4gdXNlcnMgdSBPTiBzLnVzZXJfaWQgPSB1LnVzZXJfaWRcclxuICAgICAgICAgSk9JTiBhY2NvdW50cyBhIE9OIHUuYWNjb3VudF9pZCA9IGEuYWNjb3VudF9pZFxyXG4gICAgICAgICBKT0lOIHJvbGVzIHIgT04gdS5yb2xlX2lkID0gci5yb2xlX2lkXHJcbiAgICAgICAgIFdIRVJFIHMuc2Vzc2lvbl90b2tlbiA9ICQxIEFORCBzLmV4cGlyZXNfYXQgPiBOT1coKWAsXHJcbiAgICAgICAgW3Nlc3Npb25Ub2tlbl1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQucm93c1swXSB8fCBudWxsO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdmVyaWZ5aW5nIHNlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBJbnZhbGlkYXRlIGEgc2Vzc2lvbiAtIHNlcnZlciBvbmx5XHJcbiAgYXN5bmMgaW52YWxpZGF0ZVNlc3Npb24oc2Vzc2lvblRva2VuKSB7XHJcbiAgICAvLyBFbnN1cmUgd2UncmUgcnVubmluZyBvbiB0aGUgc2VydmVyXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgc2VydmVyIHNpZGUnKTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBxdWVyeUZuKCdERUxFVEUgRlJPTSBzZXNzaW9ucyBXSEVSRSBzZXNzaW9uX3Rva2VuID0gJDEnLCBbc2Vzc2lvblRva2VuXSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW52YWxpZGF0aW5nIHNlc3Npb246JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBDcmVhdGUgYSBwYXNzd29yZCByZXNldCB0b2tlbiAtIHNlcnZlciBvbmx5XHJcbiAgYXN5bmMgY3JlYXRlUGFzc3dvcmRSZXNldFRva2VuKHVzZXJJZCkge1xyXG4gICAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHNlcnZlciBzaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdG9rZW4gPSB1dWlkdjQoKTtcclxuICAgIGNvbnN0IGV4cGlyZXNBdCA9IG5ldyBEYXRlKCk7XHJcbiAgICBleHBpcmVzQXQuc2V0SG91cnMoZXhwaXJlc0F0LmdldEhvdXJzKCkgKyAyNCk7IC8vIDI0IGhvdXJzIGV4cGlyYXRpb25cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBxdWVyeUZuKFxyXG4gICAgICAgICdJTlNFUlQgSU5UTyBwYXNzd29yZF9yZXNldF90b2tlbnMgKHVzZXJfaWQsIHRva2VuLCBleHBpcmVzX2F0KSBWQUxVRVMgKCQxLCAkMiwgJDMpJyxcclxuICAgICAgICBbdXNlcklkLCB0b2tlbiwgZXhwaXJlc0F0XVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcGFzc3dvcmQgcmVzZXQgdG9rZW46JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBWZXJpZnkgYSBwYXNzd29yZCByZXNldCB0b2tlbiAtIHNlcnZlciBvbmx5XHJcbiAgYXN5bmMgdmVyaWZ5UmVzZXRUb2tlbih0b2tlbikge1xyXG4gICAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHNlcnZlciBzaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcXVlcnlGbihcclxuICAgICAgICAnU0VMRUNUICogRlJPTSBwYXNzd29yZF9yZXNldF90b2tlbnMgV0hFUkUgdG9rZW4gPSAkMSBBTkQgZXhwaXJlc19hdCA+IE5PVygpJyxcclxuICAgICAgICBbdG9rZW5dXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0LnJvd3NbMF0gfHwgbnVsbDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHZlcmlmeWluZyByZXNldCB0b2tlbjonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIFJlc2V0IHBhc3N3b3JkIC0gc2VydmVyIG9ubHlcclxuICBhc3luYyByZXNldFBhc3N3b3JkKHRva2VuLCBuZXdQYXNzd29yZCkge1xyXG4gICAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHNlcnZlciBzaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdG9rZW5SZWNvcmQgPSBhd2FpdCB0aGlzLnZlcmlmeVJlc2V0VG9rZW4odG9rZW4pO1xyXG5cclxuICAgICAgaWYgKCF0b2tlblJlY29yZCkge1xyXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ludmFsaWQgb3IgZXhwaXJlZCB0b2tlbicgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcGFzc3dvcmRIYXNoID0gYXdhaXQgdGhpcy5oYXNoUGFzc3dvcmQobmV3UGFzc3dvcmQpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHBhc3N3b3JkXHJcbiAgICAgIGF3YWl0IHF1ZXJ5Rm4oXHJcbiAgICAgICAgJ1VQREFURSB1c2VycyBTRVQgcGFzc3dvcmRfaGFzaCA9ICQxLCB1cGRhdGVkX2F0ID0gTk9XKCkgV0hFUkUgdXNlcl9pZCA9ICQyJyxcclxuICAgICAgICBbcGFzc3dvcmRIYXNoLCB0b2tlblJlY29yZC51c2VyX2lkXVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gRGVsZXRlIHRoZSB0b2tlblxyXG4gICAgICBhd2FpdCBxdWVyeUZuKCdERUxFVEUgRlJPTSBwYXNzd29yZF9yZXNldF90b2tlbnMgV0hFUkUgdG9rZW5faWQgPSAkMScsIFt0b2tlblJlY29yZC50b2tlbl9pZF0pO1xyXG5cclxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzZXR0aW5nIHBhc3N3b3JkOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gQWNjb3VudCBtYW5hZ2VtZW50IC0gYWxsIG1ldGhvZHMgYXJlIHNlcnZlci1vbmx5XHJcbmV4cG9ydCBjb25zdCBhY2NvdW50TWFuYWdlciA9IHtcclxuICAvLyBDcmVhdGUgYSBuZXcgYWNjb3VudCB3aXRoIGFkbWluIHVzZXJcclxuICBhc3luYyBjcmVhdGVBY2NvdW50KGFjY291bnREYXRhLCB1c2VyRGF0YSkge1xyXG4gICAgLy8gRW5zdXJlIHdlJ3JlIHJ1bm5pbmcgb24gdGhlIHNlcnZlclxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHNlcnZlciBzaWRlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gU3RhcnQgYSB0cmFuc2FjdGlvblxyXG4gICAgICBhd2FpdCBxdWVyeUZuKCdCRUdJTicpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGFjY291bnRcclxuICAgICAgY29uc3QgYWNjb3VudFJlc3VsdCA9IGF3YWl0IHF1ZXJ5Rm4oXHJcbiAgICAgICAgJ0lOU0VSVCBJTlRPIGFjY291bnRzIChhY2NvdW50X25hbWUsIGFjY291bnRfZG9tYWluLCBwbGFuX2lkLCBiaWxsaW5nX2VtYWlsKSBWQUxVRVMgKCQxLCAkMiwgJDMsICQ0KSBSRVRVUk5JTkcgKicsXHJcbiAgICAgICAgW2FjY291bnREYXRhLmFjY291bnROYW1lLCBhY2NvdW50RGF0YS5hY2NvdW50RG9tYWluIHx8IG51bGwsIGFjY291bnREYXRhLnBsYW5JZCB8fCAxLCBhY2NvdW50RGF0YS5iaWxsaW5nRW1haWxdXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBhY2NvdW50ID0gYWNjb3VudFJlc3VsdC5yb3dzWzBdO1xyXG5cclxuICAgICAgLy8gSGFzaCBwYXNzd29yZFxyXG4gICAgICBjb25zdCBwYXNzd29yZEhhc2ggPSBhd2FpdCBhdXRoLmhhc2hQYXNzd29yZCh1c2VyRGF0YS5wYXNzd29yZCk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYWRtaW4gdXNlciAocm9sZV9pZCAxID0gQWRtaW4pXHJcbiAgICAgIGNvbnN0IHVzZXJSZXN1bHQgPSBhd2FpdCBxdWVyeUZuKFxyXG4gICAgICAgIGBJTlNFUlQgSU5UTyB1c2VycyAoYWNjb3VudF9pZCwgZW1haWwsIHBhc3N3b3JkX2hhc2gsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgcm9sZV9pZCwgaXNfYWNjb3VudF9hZG1pbikgXHJcbiAgICAgICAgIFZBTFVFUyAoJDEsICQyLCAkMywgJDQsICQ1LCAxLCBUUlVFKSBSRVRVUk5JTkcgKmAsXHJcbiAgICAgICAgW2FjY291bnQuYWNjb3VudF9pZCwgdXNlckRhdGEuZW1haWwsIHBhc3N3b3JkSGFzaCwgdXNlckRhdGEuZmlyc3ROYW1lLCB1c2VyRGF0YS5sYXN0TmFtZV1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGFkbWluID0gdXNlclJlc3VsdC5yb3dzWzBdO1xyXG5cclxuICAgICAgLy8gQ29tbWl0IHRyYW5zYWN0aW9uXHJcbiAgICAgIGF3YWl0IHF1ZXJ5Rm4oJ0NPTU1JVCcpO1xyXG5cclxuICAgICAgcmV0dXJuIHsgYWNjb3VudCwgYWRtaW4gfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIFJvbGxiYWNrIHRyYW5zYWN0aW9uIG9uIGVycm9yXHJcbiAgICAgIGF3YWl0IHF1ZXJ5Rm4oJ1JPTExCQUNLJyk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGFjY291bnQ6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyBSZW1haW5pbmcgYWNjb3VudCBtYW5hZ2VyIG1ldGhvZHMgKHRydW5jYXRlZCBmb3IgYnJldml0eSlcclxuICAvLyBUaGUgcGF0dGVybiB3b3VsZCBiZSB0aGUgc2FtZSAtIHVzaW5nIHF1ZXJ5Rm4gYW5kIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG59O1xyXG5cclxuLy8gQ3JlYXRlIG1vY2sgaW1wbGVtZW50YXRpb25zIGZvciBjbGllbnQtc2lkZSB1c2VcclxuY29uc3QgY3JlYXRlTW9ja0F1dGggPSAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja0F1dGggPSB7XHJcbiAgICAvLyBNb2NrIGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZSBzYWZlIHRvIHVzZSBvbiB0aGUgY2xpZW50XHJcbiAgICBhc3luYyBoYXNoUGFzc3dvcmQocGFzc3dvcmQpIHtcclxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gV2hlbiBydW5uaW5nIG9uIHRoZSBzZXJ2ZXIsIHVzZSB0aGUgcmVhbCBpbXBsZW1lbnRhdGlvblxyXG4gICAgICAgIHJldHVybiBhdXRoLmhhc2hQYXNzd29yZChwYXNzd29yZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9uIGNsaWVudCwganVzdCByZXR1cm4gYSBwbGFjZWhvbGRlciAocmVhbCBoYXNoaW5nIGhhcHBlbnMgc2VydmVyLXNpZGUpXHJcbiAgICAgIGNvbnNvbGUud2FybignaGFzaFBhc3N3b3JkIGNhbGxlZCBvbiBjbGllbnQsIHJlYWwgaGFzaGluZyB3aWxsIGhhcHBlbiBzZXJ2ZXItc2lkZScpO1xyXG4gICAgICByZXR1cm4gYG1vY2staGFzaC0ke3Bhc3N3b3JkLmxlbmd0aH1gO1xyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBjb21wYXJlUGFzc3dvcmQocGFzc3dvcmQsIGhhc2gpIHtcclxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gV2hlbiBydW5uaW5nIG9uIHRoZSBzZXJ2ZXIsIHVzZSB0aGUgcmVhbCBpbXBsZW1lbnRhdGlvblxyXG4gICAgICAgIHJldHVybiBhdXRoLmNvbXBhcmVQYXNzd29yZChwYXNzd29yZCwgaGFzaCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9uIGNsaWVudCwganVzdCByZXR1cm4gYSBwbGFjZWhvbGRlciAocmVhbCBjb21wYXJpc29uIGhhcHBlbnMgc2VydmVyLXNpZGUpXHJcbiAgICAgIGNvbnNvbGUud2FybignY29tcGFyZVBhc3N3b3JkIGNhbGxlZCBvbiBjbGllbnQsIHJlYWwgY29tcGFyaXNvbiB3aWxsIGhhcHBlbiBzZXJ2ZXItc2lkZScpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFRoZXNlIG1ldGhvZHMgc2hvdWxkIGJlIGNhbGxlZCB2aWEgQVBJIGVuZHBvaW50cyBvbiB0aGUgY2xpZW50XHJcbiAgICBhc3luYyBmaW5kVXNlckJ5RW1haWwoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB2aWEgYW4gQVBJIGVuZHBvaW50IG9uIGNsaWVudC1zaWRlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIGZpbmRVc2VyQnlJZCgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgY3JlYXRlU2Vzc2lvbigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgdmVyaWZ5U2Vzc2lvbigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgaW52YWxpZGF0ZVNlc3Npb24oKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB2aWEgYW4gQVBJIGVuZHBvaW50IG9uIGNsaWVudC1zaWRlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIGNyZWF0ZVBhc3N3b3JkUmVzZXRUb2tlbigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgdmVyaWZ5UmVzZXRUb2tlbigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgcmVzZXRQYXNzd29yZCgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4gbW9ja0F1dGg7XHJcbn07XHJcblxyXG4vLyBDcmVhdGUgYSBtb2NrIGFjY291bnQgbWFuYWdlciBmb3IgY2xpZW50LXNpZGUgdXNlXHJcbmNvbnN0IGNyZWF0ZU1vY2tBY2NvdW50TWFuYWdlciA9ICgpID0+IHtcclxuICBjb25zdCBtb2NrQWNjb3VudE1hbmFnZXIgPSB7XHJcbiAgICAvLyBBbGwgbWV0aG9kcyBzaG91bGQgYmUgY2FsbGVkIHZpYSBBUEkgZW5kcG9pbnRzIG9uIHRoZSBjbGllbnRcclxuICAgIGFzeW5jIGNyZWF0ZUFjY291bnQoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB2aWEgYW4gQVBJIGVuZHBvaW50IG9uIGNsaWVudC1zaWRlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIGdldEFjY291bnRVc2VycygpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgY3JlYXRlVXNlcigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgdXBkYXRlVXNlcigpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgYXN5bmMgdXBkYXRlQWNjb3VudCgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHZpYSBhbiBBUEkgZW5kcG9pbnQgb24gY2xpZW50LXNpZGUnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4gbW9ja0FjY291bnRNYW5hZ2VyO1xyXG59O1xyXG5cclxuLy8gRXhwb3J0IHRoZSBhcHByb3ByaWF0ZSBpbXBsZW1lbnRhdGlvbnMgYmFzZWQgb24gZW52aXJvbm1lbnRcclxuZXhwb3J0IGNvbnN0IGNsaWVudEF1dGggPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGNyZWF0ZU1vY2tBdXRoKCkgOiBhdXRoO1xyXG5leHBvcnQgY29uc3QgY2xpZW50QWNjb3VudE1hbmFnZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGNyZWF0ZU1vY2tBY2NvdW50TWFuYWdlcigpIDogYWNjb3VudE1hbmFnZXI7Il0sIm5hbWVzIjpbImJjcnlwdCIsInV1aWR2NCIsInF1ZXJ5Rm4iLCJwb29sT2JqIiwicmVxdWlyZSIsInY0IiwiZGJNb2R1bGUiLCJxdWVyeSIsInBvb2wiLCJlcnJvciIsImNvbnNvbGUiLCJoYXNoIiwiY29tcGFyZSIsIkVycm9yIiwiYXV0aCIsImhhc2hQYXNzd29yZCIsInBhc3N3b3JkIiwid2FybiIsImxlbmd0aCIsImNvbXBhcmVQYXNzd29yZCIsImZpbmRVc2VyQnlFbWFpbCIsImVtYWlsIiwicmVzdWx0Iiwicm93cyIsImZpbmRVc2VyQnlJZCIsInVzZXJJZCIsImNyZWF0ZVNlc3Npb24iLCJzZXNzaW9uVG9rZW4iLCJleHBpcmVzQXQiLCJEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ2ZXJpZnlTZXNzaW9uIiwiaW52YWxpZGF0ZVNlc3Npb24iLCJjcmVhdGVQYXNzd29yZFJlc2V0VG9rZW4iLCJ0b2tlbiIsInNldEhvdXJzIiwiZ2V0SG91cnMiLCJ2ZXJpZnlSZXNldFRva2VuIiwicmVzZXRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwidG9rZW5SZWNvcmQiLCJzdWNjZXNzIiwicGFzc3dvcmRIYXNoIiwidXNlcl9pZCIsInRva2VuX2lkIiwiYWNjb3VudE1hbmFnZXIiLCJjcmVhdGVBY2NvdW50IiwiYWNjb3VudERhdGEiLCJ1c2VyRGF0YSIsImFjY291bnRSZXN1bHQiLCJhY2NvdW50TmFtZSIsImFjY291bnREb21haW4iLCJwbGFuSWQiLCJiaWxsaW5nRW1haWwiLCJhY2NvdW50IiwidXNlclJlc3VsdCIsImFjY291bnRfaWQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImFkbWluIiwiY3JlYXRlTW9ja0F1dGgiLCJtb2NrQXV0aCIsImNyZWF0ZU1vY2tBY2NvdW50TWFuYWdlciIsIm1vY2tBY2NvdW50TWFuYWdlciIsImdldEFjY291bnRVc2VycyIsImNyZWF0ZVVzZXIiLCJ1cGRhdGVVc2VyIiwidXBkYXRlQWNjb3VudCIsImNsaWVudEF1dGgiLCJjbGllbnRBY2NvdW50TWFuYWdlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./lib/auth.js\n");

/***/ }),

/***/ "(api-node)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pool: () => (/* binding */ pool),\n/* harmony export */   query: () => (/* binding */ query)\n/* harmony export */ });\n// lib/db.js\n// Initialize query and pool as null\nlet pool = null;\nlet query = null;\n// Only run this code on the server\nif (true) {\n    try {\n        // Server-side code - import pg using require to avoid webpack issues\n        const { Pool } = __webpack_require__(/*! pg */ \"pg\");\n        // Create a database connection pool\n        pool =  false ? 0 : new Pool({\n            user: process.env.DB_USER || 'postgres',\n            host: process.env.DB_HOST || 'localhost',\n            database: process.env.DB_NAME || 'innvestai',\n            password: process.env.DB_PASSWORD || 'Temp@123',\n            port: parseInt(process.env.DB_PORT || '5432')\n        });\n        // Define the query function\n        query = async (text, params)=>{\n            try {\n                const start = Date.now();\n                const res = await pool.query(text, params);\n                const duration = Date.now() - start;\n                // Log query performance in development\n                if (true) {\n                    console.log('Executed query', {\n                        text,\n                        duration,\n                        rows: res.rowCount\n                    });\n                }\n                return res;\n            } catch (error) {\n                console.error('Database query error:', error);\n                throw error;\n            }\n        };\n        // Setup event handlers for the pool\n        pool.on('error', (err)=>{\n            console.error('Unexpected database error:', err);\n        // Don't crash the server on connection errors\n        });\n        console.log('Database module initialized on server');\n    } catch (error) {\n        console.error('Failed to initialize database module:', error);\n        // Create non-functional stubs if initialization fails\n        pool = {\n            query: ()=>{\n                throw new Error('Database pool not initialized');\n            },\n            on: ()=>{}\n        };\n        query = async ()=>{\n            throw new Error('Database query function not initialized');\n        };\n    }\n} else {}\n// Choose one export style based on the environment\n// Use ES modules export style since that's what the rest of your code uses\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFlBQVk7QUFFWixvQ0FBb0M7QUFDcEMsSUFBSUEsT0FBTztBQUNYLElBQUlDLFFBQVE7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxJQUE2QixFQUFFO0lBQ2pDLElBQUk7UUFDRixxRUFBcUU7UUFDckUsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsY0FBSTtRQUU3QixvQ0FBb0M7UUFDcENILE9BQU9JLE1BQXFDLEdBQ3hDLENBS0UsR0FDRixJQUFJRixLQUFLO1lBQ1BRLE1BQU1OLFFBQVFFLEdBQUcsQ0FBQ0ssT0FBTyxJQUFJO1lBQzdCQyxNQUFNUixRQUFRRSxHQUFHLENBQUNPLE9BQU8sSUFBSTtZQUM3QkMsVUFBVVYsUUFBUUUsR0FBRyxDQUFDUyxPQUFPLElBQUk7WUFDakNDLFVBQVVaLFFBQVFFLEdBQUcsQ0FBQ1csV0FBVyxJQUFJO1lBQ3JDQyxNQUFNQyxTQUFTZixRQUFRRSxHQUFHLENBQUNjLE9BQU8sSUFBSTtRQUN4QztRQUVKLDRCQUE0QjtRQUM1Qm5CLFFBQVEsT0FBT29CLE1BQU1DO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsUUFBUUMsS0FBS0MsR0FBRztnQkFDdEIsTUFBTUMsTUFBTSxNQUFNMUIsS0FBS0MsS0FBSyxDQUFDb0IsTUFBTUM7Z0JBQ25DLE1BQU1LLFdBQVdILEtBQUtDLEdBQUcsS0FBS0Y7Z0JBRTlCLHVDQUF1QztnQkFDdkMsSUFBSW5CLElBQXFDLEVBQUU7b0JBQ3pDd0IsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQjt3QkFBRVI7d0JBQU1NO3dCQUFVRyxNQUFNSixJQUFJSyxRQUFRO29CQUFDO2dCQUNyRTtnQkFFQSxPQUFPTDtZQUNULEVBQUUsT0FBT00sT0FBTztnQkFDZEosUUFBUUksS0FBSyxDQUFDLHlCQUF5QkE7Z0JBQ3ZDLE1BQU1BO1lBQ1I7UUFDRjtRQUVBLG9DQUFvQztRQUNwQ2hDLEtBQUtpQyxFQUFFLENBQUMsU0FBUyxDQUFDQztZQUNoQk4sUUFBUUksS0FBSyxDQUFDLDhCQUE4QkU7UUFDNUMsOENBQThDO1FBQ2hEO1FBRUFOLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0csT0FBTztRQUNkSixRQUFRSSxLQUFLLENBQUMseUNBQXlDQTtRQUV2RCxzREFBc0Q7UUFDdERoQyxPQUFPO1lBQ0xDLE9BQU87Z0JBQVEsTUFBTSxJQUFJa0MsTUFBTTtZQUFrQztZQUNqRUYsSUFBSSxLQUFPO1FBQ2I7UUFFQWhDLFFBQVE7WUFBYyxNQUFNLElBQUlrQyxNQUFNO1FBQTRDO0lBQ3BGO0FBQ0YsT0FBTyxFQVlOO0FBRUQsbURBQW1EO0FBQ25ELDJFQUEyRTtBQUNwRCIsInNvdXJjZXMiOlsiQzpcXHZpbm9kXFxwcm9qZWN0c1xcaW5udmVzdFxcUE9DXFxpbm52ZXN0YWlcXGxpYlxcZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2RiLmpzXHJcblxyXG4vLyBJbml0aWFsaXplIHF1ZXJ5IGFuZCBwb29sIGFzIG51bGxcclxubGV0IHBvb2wgPSBudWxsO1xyXG5sZXQgcXVlcnkgPSBudWxsO1xyXG5cclxuLy8gT25seSBydW4gdGhpcyBjb2RlIG9uIHRoZSBzZXJ2ZXJcclxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFNlcnZlci1zaWRlIGNvZGUgLSBpbXBvcnQgcGcgdXNpbmcgcmVxdWlyZSB0byBhdm9pZCB3ZWJwYWNrIGlzc3Vlc1xyXG4gICAgY29uc3QgeyBQb29sIH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gcG9vbFxyXG4gICAgcG9vbCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgXHJcbiAgICAgID8gbmV3IFBvb2woe1xyXG4gICAgICAgICAgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxyXG4gICAgICAgICAgc3NsOiB7XHJcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICA6IG5ldyBQb29sKHtcclxuICAgICAgICAgIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgJ3Bvc3RncmVzJyxcclxuICAgICAgICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXHJcbiAgICAgICAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnaW5udmVzdGFpJywgLy8gVXNlIGJ1aWx0LWluIHBvc3RncmVzIGRhdGFiYXNlXHJcbiAgICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJ1RlbXBAMTIzJyxcclxuICAgICAgICAgIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJzU0MzInKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBEZWZpbmUgdGhlIHF1ZXJ5IGZ1bmN0aW9uXHJcbiAgICBxdWVyeSA9IGFzeW5jICh0ZXh0LCBwYXJhbXMpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcG9vbC5xdWVyeSh0ZXh0LCBwYXJhbXMpO1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvZyBxdWVyeSBwZXJmb3JtYW5jZSBpbiBkZXZlbG9wbWVudFxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRXhlY3V0ZWQgcXVlcnknLCB7IHRleHQsIGR1cmF0aW9uLCByb3dzOiByZXMucm93Q291bnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNldHVwIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgcG9vbFxyXG4gICAgcG9vbC5vbignZXJyb3InLCAoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YWJhc2UgZXJyb3I6JywgZXJyKTtcclxuICAgICAgLy8gRG9uJ3QgY3Jhc2ggdGhlIHNlcnZlciBvbiBjb25uZWN0aW9uIGVycm9yc1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0RhdGFiYXNlIG1vZHVsZSBpbml0aWFsaXplZCBvbiBzZXJ2ZXInKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgZGF0YWJhc2UgbW9kdWxlOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIG5vbi1mdW5jdGlvbmFsIHN0dWJzIGlmIGluaXRpYWxpemF0aW9uIGZhaWxzXHJcbiAgICBwb29sID0ge1xyXG4gICAgICBxdWVyeTogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHBvb2wgbm90IGluaXRpYWxpemVkJyk7IH0sXHJcbiAgICAgIG9uOiAoKSA9PiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICBxdWVyeSA9IGFzeW5jICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyeSBmdW5jdGlvbiBub3QgaW5pdGlhbGl6ZWQnKTsgfTtcclxuICB9XHJcbn0gZWxzZSB7XHJcbiAgLy8gQ2xpZW50LXNpZGUgbW9jayBpbXBsZW1lbnRhdGlvblxyXG4gIHF1ZXJ5ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBxdWVyaWVzIGNhbm5vdCBiZSBleGVjdXRlZCBvbiB0aGUgY2xpZW50IHNpZGUnKTtcclxuICB9O1xyXG4gIFxyXG4gIHBvb2wgPSB7XHJcbiAgICBxdWVyeTogKCkgPT4ge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIHF1ZXJpZXMgY2Fubm90IGJlIGV4ZWN1dGVkIG9uIHRoZSBjbGllbnQgc2lkZScpO1xyXG4gICAgfSxcclxuICAgIG9uOiAoKSA9PiB7fVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIENob29zZSBvbmUgZXhwb3J0IHN0eWxlIGJhc2VkIG9uIHRoZSBlbnZpcm9ubWVudFxyXG4vLyBVc2UgRVMgbW9kdWxlcyBleHBvcnQgc3R5bGUgc2luY2UgdGhhdCdzIHdoYXQgdGhlIHJlc3Qgb2YgeW91ciBjb2RlIHVzZXNcclxuZXhwb3J0IHsgcXVlcnksIHBvb2wgfTsiXSwibmFtZXMiOlsicG9vbCIsInF1ZXJ5IiwiUG9vbCIsInJlcXVpcmUiLCJwcm9jZXNzIiwiY29ubmVjdGlvblN0cmluZyIsImVudiIsIkRBVEFCQVNFX1VSTCIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInVzZXIiLCJEQl9VU0VSIiwiaG9zdCIsIkRCX0hPU1QiLCJkYXRhYmFzZSIsIkRCX05BTUUiLCJwYXNzd29yZCIsIkRCX1BBU1NXT1JEIiwicG9ydCIsInBhcnNlSW50IiwiREJfUE9SVCIsInRleHQiLCJwYXJhbXMiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJyZXMiLCJkdXJhdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyb3dzIiwicm93Q291bnQiLCJlcnJvciIsIm9uIiwiZXJyIiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.js\n");

/***/ }),

/***/ "(api-node)/./middleware/auth.js":
/*!****************************!*\
  !*** ./middleware/auth.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiAuthMiddleware: () => (/* binding */ apiAuthMiddleware),\n/* harmony export */   authMiddleware: () => (/* binding */ authMiddleware),\n/* harmony export */   getAuthenticatedUser: () => (/* binding */ getAuthenticatedUser),\n/* harmony export */   isAuthenticated: () => (/* binding */ isAuthenticated)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(api-node)/./node_modules/next/server.js\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_server__WEBPACK_IMPORTED_MODULE_0__);\n// middleware/auth.js\n\n// This middleware runs on the server (Edge runtime)\nasync function authMiddleware(req) {\n    const { pathname } = req.nextUrl;\n    // Public paths that don't require authentication\n    const publicPaths = [\n        '/login',\n        '/signup',\n        '/reset-password',\n        '/api/auth/login',\n        '/api/auth/signup',\n        '/api/auth/reset-password'\n    ];\n    // Check if the path is public\n    const isPublicPath = publicPaths.some((path)=>pathname === path || pathname.startsWith(path + '/'));\n    // Allow access to public paths\n    if (isPublicPath) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // Get the session token from cookies\n    const sessionToken = req.cookies.get('session_token')?.value;\n    // If no session token, redirect to login\n    if (!sessionToken) {\n        const url = new URL('/login', req.url);\n        url.searchParams.set('redirect', pathname);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n    }\n    // Note: We can't verify the session here since Edge runtime doesn't support database connections\n    // We'll rely on API routes to verify the session on each request that needs it\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n}\n// This is used client-side to check if user is authenticated\nasync function isAuthenticated() {\n    // This only runs in the browser\n    if (true) {\n        return false;\n    }\n    // Check for session token cookie\n    const cookies = document.cookie.split(';').reduce((acc, cookie)=>{\n        const [key, value] = cookie.trim().split('=');\n        acc[key] = value;\n        return acc;\n    }, {});\n    return !!cookies.session_token;\n}\n// This is only used server-side in API routes and server components\nconst apiAuthMiddleware = async (req, res, next)=>{\n    // Only run this on the server\n    if (false) {}\n    // Get the session token from cookies\n    const cookies = req.cookies;\n    const sessionToken = cookies.session_token;\n    // If no session token, return unauthorized\n    if (!sessionToken) {\n        return res.status(401).json({\n            error: 'Authentication required'\n        });\n    }\n    try {\n        // Import auth only on server-side\n        const { auth } = __webpack_require__(/*! ../lib/auth */ \"(api-node)/./lib/auth.js\");\n        // Verify the session\n        const user = await auth.verifySession(sessionToken);\n        // If session is invalid, return unauthorized\n        if (!user) {\n            return res.status(401).json({\n                error: 'Invalid or expired session'\n            });\n        }\n        // Attach user to request object\n        req.user = user;\n        // Continue to the next middleware or handler\n        if (next) {\n            return next();\n        }\n        return true;\n    } catch (error) {\n        console.error('Auth middleware error:', error);\n        return res.status(500).json({\n            error: 'Authentication error'\n        });\n    }\n};\n// For use in API routes to get the authenticated user\nconst getAuthenticatedUser = async (req, res)=>{\n    const isAuthenticated = await apiAuthMiddleware(req, res);\n    return isAuthenticated === true ? req.user : null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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M0IsS0FBSzRCO0lBQ3JELE9BQU9WLG9CQUFvQixPQUFPbEIsSUFBSW1DLElBQUksR0FBRztBQUMvQyxFQUFFIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxcbWlkZGxld2FyZVxcYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaWRkbGV3YXJlL2F1dGguanNcclxuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5cclxuLy8gVGhpcyBtaWRkbGV3YXJlIHJ1bnMgb24gdGhlIHNlcnZlciAoRWRnZSBydW50aW1lKVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0aE1pZGRsZXdhcmUocmVxKSB7XHJcbiAgY29uc3QgeyBwYXRobmFtZSB9ID0gcmVxLm5leHRVcmw7XHJcbiAgXHJcbiAgLy8gUHVibGljIHBhdGhzIHRoYXQgZG9uJ3QgcmVxdWlyZSBhdXRoZW50aWNhdGlvblxyXG4gIGNvbnN0IHB1YmxpY1BhdGhzID0gW1xyXG4gICAgJy9sb2dpbicsXHJcbiAgICAnL3NpZ251cCcsXHJcbiAgICAnL3Jlc2V0LXBhc3N3b3JkJyxcclxuICAgICcvYXBpL2F1dGgvbG9naW4nLFxyXG4gICAgJy9hcGkvYXV0aC9zaWdudXAnLFxyXG4gICAgJy9hcGkvYXV0aC9yZXNldC1wYXNzd29yZCcsXHJcbiAgXTtcclxuICBcclxuICAvLyBDaGVjayBpZiB0aGUgcGF0aCBpcyBwdWJsaWNcclxuICBjb25zdCBpc1B1YmxpY1BhdGggPSBwdWJsaWNQYXRocy5zb21lKHBhdGggPT4gXHJcbiAgICBwYXRobmFtZSA9PT0gcGF0aCB8fCBwYXRobmFtZS5zdGFydHNXaXRoKHBhdGggKyAnLycpXHJcbiAgKTtcclxuICBcclxuICAvLyBBbGxvdyBhY2Nlc3MgdG8gcHVibGljIHBhdGhzXHJcbiAgaWYgKGlzUHVibGljUGF0aCkge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5uZXh0KCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEdldCB0aGUgc2Vzc2lvbiB0b2tlbiBmcm9tIGNvb2tpZXNcclxuICBjb25zdCBzZXNzaW9uVG9rZW4gPSByZXEuY29va2llcy5nZXQoJ3Nlc3Npb25fdG9rZW4nKT8udmFsdWU7XHJcbiAgXHJcbiAgLy8gSWYgbm8gc2Vzc2lvbiB0b2tlbiwgcmVkaXJlY3QgdG8gbG9naW5cclxuICBpZiAoIXNlc3Npb25Ub2tlbikge1xyXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCgnL2xvZ2luJywgcmVxLnVybCk7XHJcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncmVkaXJlY3QnLCBwYXRobmFtZSk7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KHVybCk7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIE5vdGU6IFdlIGNhbid0IHZlcmlmeSB0aGUgc2Vzc2lvbiBoZXJlIHNpbmNlIEVkZ2UgcnVudGltZSBkb2Vzbid0IHN1cHBvcnQgZGF0YWJhc2UgY29ubmVjdGlvbnNcclxuICAvLyBXZSdsbCByZWx5IG9uIEFQSSByb3V0ZXMgdG8gdmVyaWZ5IHRoZSBzZXNzaW9uIG9uIGVhY2ggcmVxdWVzdCB0aGF0IG5lZWRzIGl0XHJcbiAgXHJcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5uZXh0KCk7XHJcbn1cclxuXHJcbi8vIFRoaXMgaXMgdXNlZCBjbGllbnQtc2lkZSB0byBjaGVjayBpZiB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpIHtcclxuICAvLyBUaGlzIG9ubHkgcnVucyBpbiB0aGUgYnJvd3NlclxyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBcclxuICAvLyBDaGVjayBmb3Igc2Vzc2lvbiB0b2tlbiBjb29raWVcclxuICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7JykucmVkdWNlKChhY2MsIGNvb2tpZSkgPT4ge1xyXG4gICAgY29uc3QgW2tleSwgdmFsdWVdID0gY29va2llLnRyaW0oKS5zcGxpdCgnPScpO1xyXG4gICAgYWNjW2tleV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiBhY2M7XHJcbiAgfSwge30pO1xyXG4gIFxyXG4gIHJldHVybiAhIWNvb2tpZXMuc2Vzc2lvbl90b2tlbjtcclxufVxyXG5cclxuLy8gVGhpcyBpcyBvbmx5IHVzZWQgc2VydmVyLXNpZGUgaW4gQVBJIHJvdXRlcyBhbmQgc2VydmVyIGNvbXBvbmVudHNcclxuZXhwb3J0IGNvbnN0IGFwaUF1dGhNaWRkbGV3YXJlID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgLy8gT25seSBydW4gdGhpcyBvbiB0aGUgc2VydmVyXHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FwaUF1dGhNaWRkbGV3YXJlIGNhbiBvbmx5IGJlIHVzZWQgb24gdGhlIHNlcnZlcicpO1xyXG4gIH1cclxuICBcclxuICAvLyBHZXQgdGhlIHNlc3Npb24gdG9rZW4gZnJvbSBjb29raWVzXHJcbiAgY29uc3QgY29va2llcyA9IHJlcS5jb29raWVzO1xyXG4gIGNvbnN0IHNlc3Npb25Ub2tlbiA9IGNvb2tpZXMuc2Vzc2lvbl90b2tlbjtcclxuICBcclxuICAvLyBJZiBubyBzZXNzaW9uIHRva2VuLCByZXR1cm4gdW5hdXRob3JpemVkXHJcbiAgaWYgKCFzZXNzaW9uVG9rZW4pIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnIH0pO1xyXG4gIH1cclxuICBcclxuICB0cnkge1xyXG4gICAgLy8gSW1wb3J0IGF1dGggb25seSBvbiBzZXJ2ZXItc2lkZVxyXG4gICAgY29uc3QgeyBhdXRoIH0gPSByZXF1aXJlKCcuLi9saWIvYXV0aCcpO1xyXG4gICAgXHJcbiAgICAvLyBWZXJpZnkgdGhlIHNlc3Npb25cclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBhdXRoLnZlcmlmeVNlc3Npb24oc2Vzc2lvblRva2VuKTtcclxuICAgIFxyXG4gICAgLy8gSWYgc2Vzc2lvbiBpcyBpbnZhbGlkLCByZXR1cm4gdW5hdXRob3JpemVkXHJcbiAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIG9yIGV4cGlyZWQgc2Vzc2lvbicgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEF0dGFjaCB1c2VyIHRvIHJlcXVlc3Qgb2JqZWN0XHJcbiAgICByZXEudXNlciA9IHVzZXI7XHJcbiAgICBcclxuICAgIC8vIENvbnRpbnVlIHRvIHRoZSBuZXh0IG1pZGRsZXdhcmUgb3IgaGFuZGxlclxyXG4gICAgaWYgKG5leHQpIHtcclxuICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGggbWlkZGxld2FyZSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0F1dGhlbnRpY2F0aW9uIGVycm9yJyB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBGb3IgdXNlIGluIEFQSSByb3V0ZXMgdG8gZ2V0IHRoZSBhdXRoZW50aWNhdGVkIHVzZXJcclxuZXhwb3J0IGNvbnN0IGdldEF1dGhlbnRpY2F0ZWRVc2VyID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgY29uc3QgaXNBdXRoZW50aWNhdGVkID0gYXdhaXQgYXBpQXV0aE1pZGRsZXdhcmUocmVxLCByZXMpO1xyXG4gIHJldHVybiBpc0F1dGhlbnRpY2F0ZWQgPT09IHRydWUgPyByZXEudXNlciA6IG51bGw7XHJcbn07Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImF1dGhNaWRkbGV3YXJlIiwicmVxIiwicGF0aG5hbWUiLCJuZXh0VXJsIiwicHVibGljUGF0aHMiLCJpc1B1YmxpY1BhdGgiLCJzb21lIiwicGF0aCIsInN0YXJ0c1dpdGgiLCJuZXh0Iiwic2Vzc2lvblRva2VuIiwiY29va2llcyIsImdldCIsInZhbHVlIiwidXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwic2V0IiwicmVkaXJlY3QiLCJpc0F1dGhlbnRpY2F0ZWQiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwia2V5IiwidHJpbSIsInNlc3Npb25fdG9rZW4iLCJhcGlBdXRoTWlkZGxld2FyZSIsInJlcyIsIkVycm9yIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwiYXV0aCIsInJlcXVpcmUiLCJ1c2VyIiwidmVyaWZ5U2Vzc2lvbiIsImNvbnNvbGUiLCJnZXRBdXRoZW50aWNhdGVkVXNlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./middleware/auth.js\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froles&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Croles.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froles&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Croles.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_roles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\roles.js */ \"(api-node)/./pages/api/roles.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_roles_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_roles_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/roles\",\n        pathname: \"/api/roles\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_roles_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcm9sZXMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q3JvbGVzLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQ21EO0FBQ25EO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxnREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsZ0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxccm9sZXMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3JvbGVzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcm9sZXNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froles&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Croles.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/roles.js":
/*!****************************!*\
  !*** ./pages/api/roles.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _middleware_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../middleware/auth */ \"(api-node)/./middleware/auth.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/db */ \"(api-node)/./lib/db.js\");\n// pages/api/roles.js\n\n\nasync function handler(req, res) {\n    // Only allow GET requests\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        // Fetch all available roles\n        const result = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_1__.query)('SELECT role_id, role_name, description, permissions FROM roles ORDER BY role_id');\n        return res.status(200).json({\n            roles: result.rows\n        });\n    } catch (error) {\n        console.error('Error fetching roles:', error);\n        return res.status(500).json({\n            error: 'An error occurred while fetching roles'\n        });\n    }\n}\n// Export with auth middleware\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_middleware_auth__WEBPACK_IMPORTED_MODULE_0__.withAuth)(handler));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9yb2xlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQkFBcUI7QUFDNEI7QUFDWjtBQUVyQyxlQUFlRSxRQUFRQyxHQUFHLEVBQUVDLEdBQUc7SUFDM0IsMEJBQTBCO0lBQzFCLElBQUlELElBQUlFLE1BQU0sS0FBSyxPQUFPO1FBQ3RCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQjtJQUM5RDtJQUVBLElBQUk7UUFDQSw0QkFBNEI7UUFDNUIsTUFBTUMsU0FBUyxNQUFNUiw4Q0FBS0EsQ0FDdEI7UUFHSixPQUFPRyxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVHLE9BQU9ELE9BQU9FLElBQUk7UUFBQztJQUNyRCxFQUFFLE9BQU9ILE9BQU87UUFDWkksUUFBUUosS0FBSyxDQUFDLHlCQUF5QkE7UUFDdkMsT0FBT0osSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQXlDO0lBQ2xGO0FBQ0o7QUFFQSw4QkFBOEI7QUFDOUIsaUVBQWVSLDBEQUFRQSxDQUFDRSxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJDOlxcdmlub2RcXHByb2plY3RzXFxpbm52ZXN0XFxQT0NcXGlubnZlc3RhaVxccGFnZXNcXGFwaVxccm9sZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFnZXMvYXBpL3JvbGVzLmpzXHJcbmltcG9ydCB7IHdpdGhBdXRoIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZS9hdXRoJztcclxuaW1wb3J0IHsgcXVlcnkgfSBmcm9tICcuLi8uLi9saWIvZGInO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gICAgLy8gT25seSBhbGxvdyBHRVQgcmVxdWVzdHNcclxuICAgIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEZldGNoIGFsbCBhdmFpbGFibGUgcm9sZXNcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeShcclxuICAgICAgICAgICAgJ1NFTEVDVCByb2xlX2lkLCByb2xlX25hbWUsIGRlc2NyaXB0aW9uLCBwZXJtaXNzaW9ucyBGUk9NIHJvbGVzIE9SREVSIEJZIHJvbGVfaWQnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgcm9sZXM6IHJlc3VsdC5yb3dzIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyByb2xlczonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBmZXRjaGluZyByb2xlcycgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4cG9ydCB3aXRoIGF1dGggbWlkZGxld2FyZVxyXG5leHBvcnQgZGVmYXVsdCB3aXRoQXV0aChoYW5kbGVyKTsiXSwibmFtZXMiOlsid2l0aEF1dGgiLCJxdWVyeSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJyZXN1bHQiLCJyb2xlcyIsInJvd3MiLCJjb25zb2xlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/roles.js\n");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("uuid");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Froles&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Croles.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();